/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { defineComponent, createVNode } from 'vue';
import props from './props.js';
import _Chat from './chat.js';
import ChatItem from './chat-item.js';
import _ChatInput from './chat-input.js';
import _ChatAction from './chat-action.js';
import { useChat } from './useChat.js';
import '@babel/runtime/helpers/defineProperty';
import '../hooks/useConfig.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-b3580d5c.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-629c2463.js';
import '../_chunks/dep-ef1f7cbb.js';
import '../_chunks/dep-5974ece7.js';
import 'lodash/isArray';
import '../hooks/tnode.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import 'tdesign-vue-next';
import './chat-content.js';
import 'clipboard';
import 'highlight.js';
import 'marked';
import 'marked-highlight';
import './chat-loading.js';
import '@babel/runtime/helpers/slicedToArray';
import 'tdesign-icons-vue-next';
import '../hooks/useVModel.js';
import './util.js';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import './sseRequest.js';
import '@babel/runtime/helpers/toConsumableArray';
import './sseRequest-hunyuan.js';

var _ChatMofa = defineComponent({
  name: "TChatMofa",
  components: {
    Chat: _Chat,
    ChatItem: ChatItem,
    ChatInput: _ChatInput,
    ChatAction: _ChatAction
  },
  props: {
    apiKey: {
      type: String
    },
    mofaId: {
      type: String,
      required: true
    },
    welcome: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    userMeta: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    assistantMeta: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    footer: {
      type: Boolean,
      "default": true
    },
    showUserMsg: {
      type: Boolean,
      "default": true
    },
    operationBtn: props.operationBtn,
    chatRequest: {
      type: Function
    },
    layout: props.layout,
    onOperation: props.onOperation
  },
  emits: ["operation", "clear"],
  setup: function setup(props2, _ref) {
    var emit = _ref.emit;
    var _useChat = useChat(props2, emit),
      chatList = _useChat.chatList,
      loading = _useChat.loading,
      onStop = _useChat.onStop,
      operation = _useChat.operation,
      clearConfirm = _useChat.clearConfirm,
      isStreamLoad = _useChat.isStreamLoad,
      sendRequest = _useChat.sendRequest;
    var handleSend = function handleSend(inputValue) {
      sendRequest("mofa", inputValue, props2.mofaId);
    };
    return function () {
      return createVNode(_Chat, {
        "layout": props2.layout,
        "clearHistory": chatList.value.length > 0 && !isStreamLoad.value,
        "onClear": clearConfirm
      }, {
        "default": function _default() {
          return [chatList.value.map(function (item, index) {
            return createVNode(ChatItem, {
              "key": index,
              "avatar": item.avatar,
              "role": item.role,
              "datetime": item.datetime,
              "content": item.content,
              "text-loading": index === 0 && loading.value
            }, {
              actions: function actions() {
                return createVNode(_ChatAction, {
                  "operationBtn": props2.operationBtn,
                  "content": item.content,
                  "onOperation": function onOperation(type, _ref2) {
                    var e = _ref2.e;
                    return operation(type, {
                      e: e,
                      index: index
                    });
                  }
                }, null);
              }
            });
          })];
        },
        footer: function footer() {
          return createVNode(_ChatInput, {
            "stopDisabled": isStreamLoad.value,
            "onSend": handleSend,
            "onStop": onStop
          }, null);
        }
      });
    };
  }
});

export { _ChatMofa as default };
//# sourceMappingURL=chat-mofa.js.map
