/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { defineComponent, createVNode, resolveComponent } from 'vue';
import props from './props.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { Skeleton, Button, Icon, Space } from 'tdesign-vue-next';
import { RefreshIcon, CopyIcon, ThumbUpIcon, ThumbDownIcon } from 'tdesign-icons-vue-next';
import Clipboard from 'clipboard';
import { MessagePluginSingleton } from './util.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-b3580d5c.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-629c2463.js';
import '../_chunks/dep-ef1f7cbb.js';
import '../_chunks/dep-5974ece7.js';
import 'lodash/isArray';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '@babel/runtime/helpers/defineProperty';

var _ChatAction = defineComponent({
  name: "TChatAction",
  components: {
    TSkeleton: Skeleton,
    TButton: Button,
    TIcon: Icon,
    TSpace: Space
  },
  props: {
    isGood: props.isGood,
    isBad: props.isBad,
    content: props.content,
    disabled: props.disabled,
    operationBtn: props.operationBtn,
    onOperation: props.onOperation
  },
  emits: ["operation"],
  setup: function setup(props2, _ref) {
    var emit = _ref.emit;
    var COMPONENT_NAME = usePrefixClass("chat");
    var renderTNodeJSX = useTNodeJSX();
    var messagePluginInstance = MessagePluginSingleton.getInstance();
    return function () {
      var content = renderTNodeJSX("content");
      var disabled = props2.disabled;
      var copyAnswer = function copyAnswer() {
        var copyBtn = new Clipboard(".copy-btn");
        copyBtn.on("success", function () {
          messagePluginInstance.showSuccess();
        });
        copyBtn.on("error", function () {
          messagePluginInstance.showError();
        });
      };
      var handleClick = function handleClick(e, type) {
        if (type === "copy") {
          copyAnswer();
        }
        emit("operation", type, {
          e: e
        });
      };
      var replayButton = props2.operationBtn.includes("replay") ? createVNode(resolveComponent("t-space"), null, {
        "default": function _default() {
          return [createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__refresh")
          }, [createVNode(resolveComponent("t-tooltip"), {
            "content": "\u91CD\u65B0\u751F\u6210"
          }, {
            "default": function _default() {
              return [createVNode(resolveComponent("t-button"), {
                "theme": "default",
                "size": "small",
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "replay");
                }
              }, {
                "default": function _default() {
                  return [createVNode(RefreshIcon, null, null)];
                }
              })];
            }
          }), createVNode("span", {
            "class": "".concat(COMPONENT_NAME.value, "__refresh-line")
          }, null)])];
        }
      }) : null;
      var copyButton = props2.operationBtn.includes("copy") ? createVNode(resolveComponent("t-space"), null, {
        "default": function _default() {
          return [createVNode(resolveComponent("t-tooltip"), {
            "content": "\u590D\u5236"
          }, {
            "default": function _default() {
              return [createVNode(resolveComponent("t-button"), {
                "theme": "default",
                "size": "small",
                "class": "copy-btn",
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "copy");
                },
                "data-clipboard-text": content
              }, {
                "default": function _default() {
                  return [createVNode(CopyIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var goodButton = props2.operationBtn.includes("good") ? createVNode(resolveComponent("t-space"), null, {
        "default": function _default() {
          return [createVNode(resolveComponent("t-tooltip"), {
            "content": "\u70B9\u8D5E"
          }, {
            "default": function _default() {
              return [createVNode(resolveComponent("t-button"), {
                "theme": "default",
                "size": "small",
                "class": props2.isGood && "".concat(COMPONENT_NAME.value, "-button--active"),
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "good");
                }
              }, {
                "default": function _default() {
                  return [createVNode(ThumbUpIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var badButton = props2.operationBtn.includes("bad") ? createVNode(resolveComponent("t-space"), null, {
        "default": function _default() {
          return [createVNode(resolveComponent("t-tooltip"), {
            "content": "\u70B9\u8E29"
          }, {
            "default": function _default() {
              return [createVNode(resolveComponent("t-button"), {
                "theme": "default",
                "size": "small",
                "class": props2.isBad && "".concat(COMPONENT_NAME.value, "-button--active"),
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "bad");
                }
              }, {
                "default": function _default() {
                  return [createVNode(ThumbDownIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var buttonComponents = {
        replay: replayButton,
        copy: copyButton,
        good: goodButton,
        bad: badButton
      };
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__actions")
      }, [props2.operationBtn.map(function (btnKey) {
        return buttonComponents[btnKey];
      })]);
    };
  }
});

export { _ChatAction as default };
//# sourceMappingURL=chat-action.js.map
