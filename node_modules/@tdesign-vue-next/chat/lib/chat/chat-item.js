/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { defineComponent, computed, provide, createVNode, Fragment, resolveComponent } from 'vue';
import props from './props.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import _ChatContent from './chat-content.js';
import isString from 'lodash/isString';
import isArray from 'lodash/isArray';
import { Skeleton, Button, Icon, Space } from 'tdesign-vue-next';
import ChatLoading from './chat-loading.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-e921bbd6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-9f074fc1.js';
import '../_chunks/dep-5386bb80.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import 'clipboard';
import 'highlight.js';
import 'marked';
import 'marked-highlight';

var ChatItem = defineComponent({
  name: "TChatItem",
  components: {
    TSkeleton: Skeleton,
    TButton: Button,
    TIcon: Icon,
    TSpace: Space,
    Text: _ChatContent
  },
  props: props,
  emits: ["operation"],
  setup: function setup(props2, _ref) {
    _ref.emit;
    var COMPONENT_NAME = usePrefixClass("chat");
    var renderTNodeJSX = useTNodeJSX();
    var role = computed(function () {
      return renderTNodeJSX("role");
    });
    var variant = computed(function () {
      return renderTNodeJSX("variant");
    });
    provide("role", role.value);
    return function () {
      if (role.value === "model-change") {
        var content2 = renderTNodeJSX("content");
        var modelChangeDom = createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__notice"),
          "innerHTML": content2
        }, null);
        return createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner model-change")
        }, [modelChangeDom]);
      }
      var roleValue = renderTNodeJSX("role");
      var movable = renderTNodeJSX("movable");
      var name = renderTNodeJSX("name");
      var datetime = renderTNodeJSX("datetime");
      var avatar = renderTNodeJSX("avatar");
      var shownameDatetime = computed(function () {
        return name || datetime;
      });
      var contentClasses = computed(function () {
        return shownameDatetime.value ? ["".concat(COMPONENT_NAME.value, "__content")] : ["".concat(COMPONENT_NAME.value, "__content"), "".concat(COMPONENT_NAME.value, "__content--base")];
      });
      var avatarDom = avatar ? createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__avatar")
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__avatar__box")
      }, [isString(avatar) ? createVNode("img", {
        "src": avatar,
        "alt": "",
        "class": "".concat(COMPONENT_NAME.value, "__avatar-image")
      }, null) : avatar])]) : null;
      var nameDatetimeDom = shownameDatetime.value && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__base")
      }, [name && createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__name")
      }, [name]), datetime && createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__time")
      }, [datetime])]);
      var textLoading = props2.textLoading;
      var content = renderTNodeJSX("content");
      var showActions = computed(function () {
        return renderTNodeJSX("actions");
      });
      var contentDom = createVNode(Fragment, null, [avatarDom, createVNode("div", {
        "class": contentClasses.value
      }, [nameDatetimeDom, textLoading && createVNode(resolveComponent("t-skeleton"), {
        "loading": textLoading,
        "animation": "gradient"
      }, null), textLoading && movable && createVNode(ChatLoading, {
        "loading": textLoading,
        "animation": "gradient"
      }, null), !textLoading && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__detail")
      }, [isArray(content) ? content : createVNode(_ChatContent, {
        "isNormalText": false,
        "content": content,
        "role": role.value
      }, null)]), role.value === "assistant" && showActions.value && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__actions-margin")
      }, [renderTNodeJSX("actions")])])]);
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__inner ").concat(roleValue, " ").concat(COMPONENT_NAME.value, "__text--variant--").concat(variant.value)
      }, [contentDom]);
    };
  }
});

export { ChatItem as default };
//# sourceMappingURL=chat-item.js.map
