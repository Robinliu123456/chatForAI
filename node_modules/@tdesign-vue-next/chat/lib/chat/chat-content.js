/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { defineComponent, computed, inject, onMounted, createVNode } from 'vue';
import Clipboard from 'clipboard';
import hljs from 'highlight.js';
import { Marked } from 'marked';
import { markedHighlight } from 'marked-highlight';
import props from './props.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-e921bbd6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-9f074fc1.js';
import '../_chunks/dep-5386bb80.js';
import 'lodash/isArray';

var escapeTest = /[&<>"']/;
var escapeReplace = new RegExp(escapeTest.source, "g");
var escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
var escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = function getEscapeReplacement(ch) {
  return escapeReplacements[ch];
};
function escape(html) {
  var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else if (escapeTestNoEncode.test(html)) {
    return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
  }
  return html;
}
var marked = new Marked(markedHighlight({
  highlight: function highlight(code) {
    return hljs.highlightAuto(code).value;
  }
}), {
  renderer: {
    code: function code(_code, lang, escaped) {
      return "<pre class=\"hljs\"><div class=\"t-chat__code-header\">\n        <span class=\"t-chat__language-txt\">".concat(escape(lang) || "", "</span>\n        <div class=\"t-chat__copy-btn\" data-clipboard-action=\"copy\">\u590D\u5236\u4EE3\u7801</div>\n        </div><code class=\"hljs language-").concat(escape(lang), "\" >").concat(escaped ? _code : escape(_code), "</code></pre>");
    }
  }
});
var _ChatContent = defineComponent({
  name: "TChatContent",
  components: {},
  props: props,
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("chat");
    var role = computed(function () {
      return props2.role || inject("role", props2.role);
    });
    onMounted(function () {
      var clipboard = new Clipboard(".t-chat__copy-btn", {
        target: function target(trigger) {
          return trigger.parentNode.nextElementSibling;
        }
      });
      clipboard.on("success", function (e) {
        e.trigger.textContent = "\u5DF2\u590D\u5236";
        setTimeout(function () {
          e.trigger.textContent = "\u590D\u5236\u4EE3\u7801";
        }, 2e3);
        e.clearSelection();
      });
    });
    var getHtmlByMarked = function getHtmlByMarked(markdown) {
      if (!markdown) {
        return '<div class="waiting"></div>';
      }
      return marked.parse(markdown);
    };
    var textInfo = computed(function () {
      if (role.value === "user") {
        return escape(props2.content || "");
      }
      return getHtmlByMarked(props2.content);
    });
    return function () {
      return createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__text")]
      }, [role.value === "user" ? createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__text__user")
      }, [createVNode("pre", {
        "innerHTML": textInfo.value
      }, null)]) : createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__text__assistant")
      }, [createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__text__content"), "".concat(COMPONENT_NAME.value, "__text--").concat(role.value)],
        "innerHTML": textInfo.value
      }, null)])]);
    };
  }
});

export { _ChatContent as default };
//# sourceMappingURL=chat-content.js.map
