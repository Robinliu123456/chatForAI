/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, toRefs, computed, createVNode, resolveComponent } from 'vue';
import { RectangleIcon, SendIcon, StopCircleIcon } from 'tdesign-icons-vue-next';
import { useTNodeJSX } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { Button, Row, Textarea, Loading } from 'tdesign-vue-next';
import props from './props.js';
import useVModel from '../hooks/useVModel.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-e921bbd6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-9f074fc1.js';
import '../_chunks/dep-5386bb80.js';
import 'lodash/isArray';

var _ChatInput = defineComponent({
  name: "TChatInput",
  components: {
    RectangleIcon: RectangleIcon,
    SendIcon: SendIcon,
    TButton: Button,
    TRow: Row,
    TTextarea: Textarea,
    TLoading: Loading
  },
  props: {
    modelValue: {
      type: String,
      "default": ""
    },
    value: {
      type: String,
      "default": ""
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": "\u8BF7\u8F93\u5165\u6D88\u606F..."
    },
    stopDisabled: {
      type: Boolean,
      "default": false
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    autofocus: {
      type: Boolean,
      "default": false
    },
    autosize: props.autosize,
    onSend: props.onSend,
    onStop: props.onStop,
    onChange: props.onChange,
    onBlur: props.onBlur,
    onFocus: props.onFocus
  },
  emits: ["send", "stop", "update:modelValue", "blur", "focus"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots,
      emit = _ref.emit;
    var COMPONENT_NAME = usePrefixClass("chat");
    var _toRefs = toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      textValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var disabled = computed(function () {
      return props2.stopDisabled;
    });
    var textareaDisabled = computed(function () {
      return props2.disabled;
    });
    var autofocus = computed(function () {
      return props2.autofocus;
    });
    var autosize = computed(function () {
      return props2.autosize;
    });
    var shiftDownFlag = false;
    var isComposition = false;
    var renderTNodeJSX = useTNodeJSX();
    var suffixIcon = renderTNodeJSX("suffixIcon") || slots.suffixIcon;
    var sendClick = function sendClick(e) {
      if (textValue.value && !disabled.value) {
        emit("send", textValue.value, {
          e: e
        });
        setInnerValue("", {
          e: e
        });
      }
    };
    var handleStop = function handleStop(e) {
      emit("stop", textValue.value, {
        e: e
      });
    };
    var textChange = function textChange(value2, context) {
      setInnerValue(value2, context);
    };
    var blurFn = function blurFn(value2, context) {
      emit("blur", value2, context);
    };
    var focusFn = function focusFn(value2, context) {
      emit("focus", value2, context);
    };
    var keydownFn = function keydownFn(value2, context) {
      var key = context.e.key;
      if (key === "Shift") {
        shiftDownFlag = true;
      }
      if (key === "Enter" && !shiftDownFlag && !isComposition) {
        context.e.cancelBubble = true;
        context.e.preventDefault();
        context.e.stopPropagation();
        sendClick(context.e);
      }
    };
    var keyupFn = function keyupFn(value2, context) {
      var key = context.e.key;
      if (key === "Shift") {
        shiftDownFlag = false;
      }
    };
    var compositionstartFn = function compositionstartFn() {
      isComposition = true;
    };
    var compositionendFn = function compositionendFn() {
      isComposition = false;
    };
    var getDefaultSuffixIcon = function getDefaultSuffixIcon() {
      return createVNode(resolveComponent("t-button"), {
        "theme": "default",
        "size": "small",
        "variant": "text",
        "class": ["".concat(COMPONENT_NAME.value, "__footer__textarea__icon__default"), textValue.value ? "".concat(COMPONENT_NAME.value, "__footer__textarea__icon--focus") : ""],
        "disabled": disabled.value || !textValue.value || textareaDisabled.value
      }, {
        "default": function _default() {
          return [createVNode(SendIcon, null, null)];
        }
      });
    };
    var renderSuffixIcon = function renderSuffixIcon() {
      return suffixIcon ? suffixIcon : getDefaultSuffixIcon();
    };
    return function () {
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__footer__content")
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__footer__textarea")
      }, [createVNode(resolveComponent("t-textarea"), {
        "value": textValue.value,
        "class": "noscrollbar",
        "placeholder": props2.placeholder,
        "disabled": textareaDisabled.value,
        "autofocus": autofocus.value,
        "autosize": autosize.value,
        "onChange": textChange,
        "onBlur": blurFn,
        "onFocus": focusFn,
        "onKeydown": keydownFn,
        "onKeyup": keyupFn,
        "onCompositionstart": compositionstartFn,
        "onCompositionend": compositionendFn
      }, null), createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__footer__textarea__icon"),
        "onClick": sendClick
      }, [renderSuffixIcon()])]), disabled.value && !textareaDisabled.value && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__footer__stopbtn")
      }, [createVNode(resolveComponent("t-button"), {
        "variant": "outline",
        "onClick": handleStop
      }, {
        "default": function _default() {
          return [createVNode(StopCircleIcon, {
            "slot": "icon"
          }, null), "\u4E2D\u6B62"];
        }
      })])]);
    };
  }
});

export { _ChatInput as default };
//# sourceMappingURL=chat-input.js.map
