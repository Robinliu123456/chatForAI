/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { defineComponent, computed, provide, createVNode, Fragment, resolveComponent } from 'vue';
import props from './props.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import _ChatContent from './chat-content.mjs';
import { i as isString_1 } from '../_chunks/dep-fd60d91e.mjs';
import { i as isArray_1 } from '../_chunks/dep-ffc8118c.mjs';
import { Skeleton, Button, Icon, Space } from 'tdesign-vue-next';
import ChatLoading from './chat-loading.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-5da300bf.mjs';
import '../_chunks/dep-b3ff3ff0.mjs';
import '../_chunks/dep-91b2e8c1.mjs';
import '../_chunks/dep-36315193.mjs';
import '../_chunks/dep-a44dea60.mjs';
import '../_chunks/dep-e8d61826.mjs';
import '../_chunks/dep-b1f97c25.mjs';
import '../_chunks/dep-ac3040d2.mjs';
import '../_chunks/dep-18b739ba.mjs';
import '../_chunks/dep-f5265842.mjs';
import '../_chunks/dep-b17ed138.mjs';
import '../_chunks/dep-d42887a6.mjs';
import '../_chunks/dep-98e16d65.mjs';
import '../_chunks/dep-819a683b.mjs';
import '../_chunks/dep-7fe9d1a7.mjs';
import '../_chunks/dep-a7a306cf.mjs';
import '../_chunks/dep-9a795619.mjs';
import '../_chunks/dep-04387f3b.mjs';
import '../config-provider/context.mjs';
import '../_chunks/dep-fcce85a1.mjs';
import '../_chunks/dep-156e5aba.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-908cd063.mjs';
import '../_chunks/dep-0b9922e8.mjs';
import '../_chunks/dep-90d16745.mjs';
import '../_chunks/dep-766eae6c.mjs';
import '../_chunks/dep-1e206b34.mjs';
import '../_chunks/dep-fb621f24.mjs';
import '../_chunks/dep-76d61a9c.mjs';
import '../_chunks/dep-f8303dbc.mjs';
import '../_chunks/dep-4f9d456f.mjs';
import '../utils/render-tnode.mjs';
import 'clipboard';
import 'highlight.js';
import 'marked';
import 'marked-highlight';

var ChatItem = defineComponent({
  name: "TChatItem",
  components: {
    TSkeleton: Skeleton,
    TButton: Button,
    TIcon: Icon,
    TSpace: Space,
    Text: _ChatContent
  },
  props: props,
  emits: ["operation"],
  setup: function setup(props2, _ref) {
    var emit = _ref.emit;
    var COMPONENT_NAME = usePrefixClass("chat");
    var renderTNodeJSX = useTNodeJSX();
    var role = computed(function () {
      return renderTNodeJSX("role");
    });
    var variant = computed(function () {
      return renderTNodeJSX("variant");
    });
    provide("role", role.value);
    return function () {
      if (role.value === "model-change") {
        var content2 = renderTNodeJSX("content");
        var modelChangeDom = createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__notice"),
          "innerHTML": content2
        }, null);
        return createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner model-change")
        }, [modelChangeDom]);
      }
      var roleValue = renderTNodeJSX("role");
      var movable = renderTNodeJSX("movable");
      var name = renderTNodeJSX("name");
      var datetime = renderTNodeJSX("datetime");
      var avatar = renderTNodeJSX("avatar");
      var shownameDatetime = computed(function () {
        return name || datetime;
      });
      var contentClasses = computed(function () {
        return shownameDatetime.value ? ["".concat(COMPONENT_NAME.value, "__content")] : ["".concat(COMPONENT_NAME.value, "__content"), "".concat(COMPONENT_NAME.value, "__content--base")];
      });
      var avatarDom = avatar ? createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__avatar")
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__avatar__box")
      }, [isString_1(avatar) ? createVNode("img", {
        "src": avatar,
        "alt": "",
        "class": "".concat(COMPONENT_NAME.value, "__avatar-image")
      }, null) : avatar])]) : null;
      var nameDatetimeDom = shownameDatetime.value && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__base")
      }, [name && createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__name")
      }, [name]), datetime && createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__time")
      }, [datetime])]);
      var textLoading = props2.textLoading;
      var content = renderTNodeJSX("content");
      var showActions = computed(function () {
        return renderTNodeJSX("actions");
      });
      var contentDom = createVNode(Fragment, null, [avatarDom, createVNode("div", {
        "class": contentClasses.value
      }, [nameDatetimeDom, textLoading && createVNode(resolveComponent("t-skeleton"), {
        "loading": textLoading,
        "animation": "gradient"
      }, null), textLoading && movable && createVNode(ChatLoading, {
        "loading": textLoading,
        "animation": "gradient"
      }, null), !textLoading && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__detail")
      }, [isArray_1(content) ? content : createVNode(_ChatContent, {
        "isNormalText": false,
        "content": content,
        "role": role.value
      }, null)]), role.value === "assistant" && showActions.value && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__actions-margin")
      }, [renderTNodeJSX("actions")])])]);
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__inner ").concat(roleValue, " ").concat(COMPONENT_NAME.value, "__text--variant--").concat(variant.value)
      }, [contentDom]);
    };
  }
});

export { ChatItem as default };
//# sourceMappingURL=chat-item.mjs.map
