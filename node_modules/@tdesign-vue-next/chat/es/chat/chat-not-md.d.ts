declare const _default: import("vue").DefineComponent<{
    actions: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
    };
    name: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    avatar: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    content: {
        type: import("vue").PropType<string>;
        default: string;
    };
    datetime: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    role: {
        type: import("vue").PropType<import("./type").ModelRoleEnum>;
        default: string;
        validator(val: string): boolean;
    };
    isGood: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    isBad: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    isStreamLoad: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    clearHistory: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    reverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    textLoading: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    data: {
        type: import("vue").PropType<import("./type").TdChatItemProps[]>;
    };
    variant: {
        type: import("vue").PropType<import("./type").Variant>;
        default: string;
        validator(val: string): boolean;
    };
    movable: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    animation: {
        type: import("vue").PropType<string>;
        default: string;
        validator(val: string): boolean;
    };
    itemIndex: {
        type: import("vue").PropType<Number>;
    };
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: import("./type").TdChatItemProps;
    }) => void>;
    disabled: import("vue").PropType<boolean>;
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onScroll: import("vue").PropType<(e: Event) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: {
            minRows: number;
            maxRows: number;
        };
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    actions: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
    };
    name: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    avatar: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    content: {
        type: import("vue").PropType<string>;
        default: string;
    };
    datetime: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    role: {
        type: import("vue").PropType<import("./type").ModelRoleEnum>;
        default: string;
        validator(val: string): boolean;
    };
    isGood: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    isBad: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    isStreamLoad: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    clearHistory: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    reverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    textLoading: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    data: {
        type: import("vue").PropType<import("./type").TdChatItemProps[]>;
    };
    variant: {
        type: import("vue").PropType<import("./type").Variant>;
        default: string;
        validator(val: string): boolean;
    };
    movable: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    animation: {
        type: import("vue").PropType<string>;
        default: string;
        validator(val: string): boolean;
    };
    itemIndex: {
        type: import("vue").PropType<Number>;
    };
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: import("./type").TdChatItemProps;
    }) => void>;
    disabled: import("vue").PropType<boolean>;
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onScroll: import("vue").PropType<(e: Event) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: {
            minRows: number;
            maxRows: number;
        };
    };
}>>, {
    reverse: boolean;
    animation: string;
    content: string;
    layout: import("./type").Layout;
    role: import("./type").ModelRoleEnum;
    autosize: {
        minRows: number;
        maxRows: number;
    };
    isGood: Boolean;
    isBad: Boolean;
    isStreamLoad: boolean;
    clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    textLoading: boolean;
    variant: import("./type").Variant;
    movable: Boolean;
    operationBtn: import("./props").operationBtnType[];
}, {}>;
export default _default;
