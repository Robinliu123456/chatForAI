/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-820ccf03.mjs';
import { defineComponent, provide, computed, createVNode, ref } from 'vue';
import props from './props.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import ChatItem from './chat-item.mjs';
import { i as isArray_1 } from '../_chunks/dep-ffc8118c.mjs';
import { Divider, Popconfirm, Icon } from 'tdesign-vue-next';
import '../_chunks/dep-36315193.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-5da300bf.mjs';
import '../_chunks/dep-b3ff3ff0.mjs';
import '../_chunks/dep-91b2e8c1.mjs';
import '../_chunks/dep-a44dea60.mjs';
import '../_chunks/dep-e8d61826.mjs';
import '../_chunks/dep-b1f97c25.mjs';
import '../_chunks/dep-ac3040d2.mjs';
import '../_chunks/dep-18b739ba.mjs';
import '../_chunks/dep-f5265842.mjs';
import '../_chunks/dep-b17ed138.mjs';
import '../_chunks/dep-d42887a6.mjs';
import '../_chunks/dep-98e16d65.mjs';
import '../_chunks/dep-819a683b.mjs';
import '../_chunks/dep-7fe9d1a7.mjs';
import '../_chunks/dep-a7a306cf.mjs';
import '../_chunks/dep-9a795619.mjs';
import '../_chunks/dep-04387f3b.mjs';
import '../_chunks/dep-fd60d91e.mjs';
import '../config-provider/context.mjs';
import '../_chunks/dep-fcce85a1.mjs';
import '../_chunks/dep-156e5aba.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-908cd063.mjs';
import '../_chunks/dep-0b9922e8.mjs';
import '../_chunks/dep-90d16745.mjs';
import '../_chunks/dep-766eae6c.mjs';
import '../_chunks/dep-1e206b34.mjs';
import '../_chunks/dep-fb621f24.mjs';
import '../_chunks/dep-76d61a9c.mjs';
import '../_chunks/dep-f8303dbc.mjs';
import '../_chunks/dep-4f9d456f.mjs';
import '../utils/render-tnode.mjs';
import './chat-content.mjs';
import 'clipboard';
import 'highlight.js';
import 'marked';
import 'marked-highlight';
import './chat-loading.mjs';

var handleScrollToBottom = function handleScrollToBottom(target, behavior) {
  var currentScrollHeight = target.scrollHeight;
  var currentClientHeight = target.clientHeight;
  var innerBehavior = behavior !== null && behavior !== void 0 ? behavior : "auto";
  if (innerBehavior === "auto") {
    target.scrollTop = currentScrollHeight - currentClientHeight;
  } else {
    var startScrollTop = target.scrollTop;
    var endScrollTop = currentScrollHeight - currentClientHeight;
    var duration = 300;
    var step = (endScrollTop - startScrollTop) / duration;
    var startTime;
    var animateScroll = function animateScroll(time) {
      if (!startTime) {
        startTime = time;
      }
      var elapsed = time - startTime;
      var top = Math.min(endScrollTop, startScrollTop + elapsed * step);
      target.scrollTop = top;
      if (top < endScrollTop) {
        requestAnimationFrame(animateScroll);
      }
    };
    requestAnimationFrame(animateScroll);
  }
};
var _Chat = defineComponent({
  name: "TChat",
  components: {
    TDivider: Divider,
    TPopconfirm: Popconfirm,
    TIcon: Icon,
    ChatItem: ChatItem
  },
  props: {
    data: props.data,
    layout: props.layout,
    clearHistory: props.clearHistory,
    reverse: props.reverse,
    isStreamLoad: props.isStreamLoad,
    textLoading: props.textLoading,
    onClear: props.onClear,
    onScroll: props.onScroll
  },
  emits: ["clear", "scroll"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots,
      emit = _ref.emit,
      expose = _ref.expose;
    var COMPONENT_NAME = usePrefixClass("chat");
    var renderTNodeJSX = useTNodeJSX();
    provide("textLoading", props2.textLoading);
    provide("reverse", props2.reverse);
    var classes = computed(function () {
      return [COMPONENT_NAME.value, _defineProperty({}, "".concat(COMPONENT_NAME.value, "--normal"), props2.layout === "both")];
    });
    var listClasses = computed(function () {
      return ["".concat(COMPONENT_NAME.value, "__list"), _defineProperty({}, "".concat(COMPONENT_NAME.value, "__list--reverse"), props2.reverse)];
    });
    var renderBody = function renderBody() {
      var data = renderTNodeJSX("data") || props2.data;
      if (isArray_1(data) && data.length > 0) {
        var isLoading = function isLoading(index) {
          return (props2.reverse ? index === 0 : index === data.length - 1) && props2.textLoading;
        };
        return data.map(function (item, index) {
          return createVNode(ChatItem, {
            "avatar": item.avatar,
            "name": item.name,
            "role": item.role,
            "datetime": item.datetime,
            "content": item.content,
            "text-loading": isLoading(index),
            "itemIndex": index
          }, null);
        });
      } else {
        return renderTNodeJSX("default");
      }
    };
    var clearConfirm = function clearConfirm(context) {
      emit("clear", context);
    };
    var defaultClearHistory = createVNode(Popconfirm, {
      "content": "\u786E\u5B9A\u8981\u6E05\u7A7A\u6240\u6709\u7684\u6D88\u606F\u5417\uFF1F",
      "onConfirm": clearConfirm
    }, {
      "default": function _default() {
        return [createVNode(Divider, {
          "class": "clear-btn"
        }, {
          "default": function _default() {
            return [createVNode(Icon, {
              "name": "clear",
              "size": "14px"
            }, null), createVNode("span", {
              "class": "clear-btn-text"
            }, ["\u6E05\u7A7A\u5386\u53F2\u8BB0\u5F55"])];
          }
        })];
      }
    });
    var showFooter = computed(function () {
      return renderTNodeJSX("footer");
    });
    var chatBoxRef = ref();
    var scrollToBottom = function scrollToBottom(data) {
      if (!chatBoxRef.value) return;
      var _data$behavior = data.behavior,
        behavior = _data$behavior === void 0 ? "auto" : _data$behavior;
      handleScrollToBottom(chatBoxRef.value, behavior);
    };
    var handleScroll = function handleScroll(e) {
      emit("scroll", {
        e: e
      });
    };
    expose({
      scrollToBottom: scrollToBottom
    });
    return function () {
      return createVNode("div", {
        "class": classes.value
      }, [createVNode("div", {
        "class": listClasses.value,
        "ref": chatBoxRef,
        "onScroll": handleScroll
      }, [props2.reverse && createVNode("div", {
        "className": "place-holder"
      }, null), props2.reverse && props2.clearHistory && renderTNodeJSX("clearHistory", defaultClearHistory), renderBody(), !props2.reverse && props2.clearHistory && renderTNodeJSX("clearHistory", defaultClearHistory)]), showFooter.value && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__footer")
      }, [showFooter.value])]);
    };
  }
});

export { _Chat as default };
//# sourceMappingURL=chat.mjs.map
