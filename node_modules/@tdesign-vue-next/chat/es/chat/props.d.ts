import { TdChatItemProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    actions: {
        type: PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
    };
    name: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    avatar: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    content: {
        type: PropType<string>;
        default: string;
    };
    datetime: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    role: {
        type: PropType<import("./type").ModelRoleEnum>;
        default: string;
        validator(val: string): boolean;
    };
    isGood: {
        type: PropType<Boolean>;
        default: boolean;
    };
    isBad: {
        type: PropType<Boolean>;
        default: boolean;
    };
    layout: {
        type: PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    isStreamLoad: {
        type: PropType<boolean>;
        default: boolean;
    };
    clearHistory: {
        type: PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    reverse: {
        type: PropType<boolean>;
        default: boolean;
    };
    textLoading: {
        type: PropType<boolean>;
        default: boolean;
    };
    data: {
        type: PropType<TdChatItemProps[]>;
    };
    variant: {
        type: PropType<import("./type").Variant>;
        default: string;
        validator(val: string): boolean;
    };
    movable: {
        type: PropType<Boolean>;
        default: boolean;
    };
    animation: {
        type: PropType<string>;
        default: string;
        validator(val: string): boolean;
    };
    itemIndex: {
        type: PropType<Number>;
    };
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    operationBtn: {
        type: PropType<operationBtnType[]>;
        default: string[];
    };
    onOperation: PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
    disabled: PropType<boolean>;
    onSend: PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onChange: PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onScroll: PropType<(e: Event) => void>;
    onFocus: PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onBlur: PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    autosize: {
        type: PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: {
            minRows: number;
            maxRows: number;
        };
    };
};
export default _default;
export declare type operationBtnType = 'replay' | 'copy' | 'good' | 'bad';
