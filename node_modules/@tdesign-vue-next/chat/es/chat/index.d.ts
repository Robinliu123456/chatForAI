import { TdChatProps, TdChatItemProps, TdChatListProps, TdChatContentProps } from './type';
import './style';
export * from './type';
export declare type ChatProps = TdChatProps;
export declare type ChatItemProps = TdChatItemProps;
export declare type ChatListProps = TdChatListProps;
export declare type ChatContentProps = TdChatContentProps;
export declare const Chat: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
    }>> & {
        onScroll?: (...args: any[]) => any;
        onClear?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "clear")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
    }>> & {
        onScroll?: (...args: any[]) => any;
        onClear?: (...args: any[]) => any;
    }, {
        reverse: boolean;
        layout: import("./type").Layout;
        isStreamLoad: boolean;
        clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        textLoading: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
    }>> & {
        onScroll?: (...args: any[]) => any;
        onClear?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        reverse: boolean;
        layout: import("./type").Layout;
        isStreamLoad: boolean;
        clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        textLoading: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: import("vue").PropType<TdChatItemProps[]>;
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    clearHistory: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    reverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isStreamLoad: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    textLoading: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(e: Event) => void>;
}>> & {
    onScroll?: (...args: any[]) => any;
    onClear?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "clear")[], "clear" | "scroll", {
    reverse: boolean;
    layout: import("./type").Layout;
    isStreamLoad: boolean;
    clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    textLoading: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        avatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        content: {
            type: import("vue").PropType<string>;
            default: string;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        role: {
            type: import("vue").PropType<import("./type").ModelRoleEnum>;
            default: string;
            validator(val: string): boolean;
        };
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        variant: {
            type: import("vue").PropType<import("./type").Variant>;
            default: string;
            validator(val: string): boolean;
        };
        movable: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        animation: {
            type: import("vue").PropType<string>;
            default: string;
            validator(val: string): boolean;
        };
        itemIndex: {
            type: import("vue").PropType<Number>;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
        disabled: import("vue").PropType<boolean>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        avatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        content: {
            type: import("vue").PropType<string>;
            default: string;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        role: {
            type: import("vue").PropType<import("./type").ModelRoleEnum>;
            default: string;
            validator(val: string): boolean;
        };
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        variant: {
            type: import("vue").PropType<import("./type").Variant>;
            default: string;
            validator(val: string): boolean;
        };
        movable: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        animation: {
            type: import("vue").PropType<string>;
            default: string;
            validator(val: string): boolean;
        };
        itemIndex: {
            type: import("vue").PropType<Number>;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
        disabled: import("vue").PropType<boolean>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, {
        reverse: boolean;
        animation: string;
        content: string;
        layout: import("./type").Layout;
        role: import("./type").ModelRoleEnum;
        autosize: {
            minRows: number;
            maxRows: number;
        };
        isGood: Boolean;
        isBad: Boolean;
        isStreamLoad: boolean;
        clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        textLoading: boolean;
        variant: import("./type").Variant;
        movable: Boolean;
        operationBtn: import("./props").operationBtnType[];
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        avatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        content: {
            type: import("vue").PropType<string>;
            default: string;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        role: {
            type: import("vue").PropType<import("./type").ModelRoleEnum>;
            default: string;
            validator(val: string): boolean;
        };
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        variant: {
            type: import("vue").PropType<import("./type").Variant>;
            default: string;
            validator(val: string): boolean;
        };
        movable: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        animation: {
            type: import("vue").PropType<string>;
            default: string;
            validator(val: string): boolean;
        };
        itemIndex: {
            type: import("vue").PropType<Number>;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
        disabled: import("vue").PropType<boolean>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        reverse: boolean;
        animation: string;
        content: string;
        layout: import("./type").Layout;
        role: import("./type").ModelRoleEnum;
        autosize: {
            minRows: number;
            maxRows: number;
        };
        isGood: Boolean;
        isBad: Boolean;
        isStreamLoad: boolean;
        clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        textLoading: boolean;
        variant: import("./type").Variant;
        movable: Boolean;
        operationBtn: import("./props").operationBtnType[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    actions: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
    };
    name: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    avatar: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    content: {
        type: import("vue").PropType<string>;
        default: string;
    };
    datetime: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    role: {
        type: import("vue").PropType<import("./type").ModelRoleEnum>;
        default: string;
        validator(val: string): boolean;
    };
    isGood: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    isBad: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    isStreamLoad: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    clearHistory: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    reverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    textLoading: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    data: {
        type: import("vue").PropType<TdChatItemProps[]>;
    };
    variant: {
        type: import("vue").PropType<import("./type").Variant>;
        default: string;
        validator(val: string): boolean;
    };
    movable: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    animation: {
        type: import("vue").PropType<string>;
        default: string;
        validator(val: string): boolean;
    };
    itemIndex: {
        type: import("vue").PropType<Number>;
    };
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
    disabled: import("vue").PropType<boolean>;
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onScroll: import("vue").PropType<(e: Event) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: {
            minRows: number;
            maxRows: number;
        };
    };
}>> & {
    onOperation?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], "operation", {
    reverse: boolean;
    animation: string;
    content: string;
    layout: import("./type").Layout;
    role: import("./type").ModelRoleEnum;
    autosize: {
        minRows: number;
        maxRows: number;
    };
    isGood: Boolean;
    isBad: Boolean;
    isStreamLoad: boolean;
    clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    textLoading: boolean;
    variant: import("./type").Variant;
    movable: Boolean;
    operationBtn: import("./props").operationBtnType[];
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatInput: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        stopDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
    }>> & {
        onStop?: (...args: any[]) => any;
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("stop" | "blur" | "focus" | "send" | "update:modelValue")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        stopDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
    }>> & {
        onStop?: (...args: any[]) => any;
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
    }, {
        value: string;
        autofocus: boolean;
        disabled: boolean;
        placeholder: string;
        autosize: {
            minRows: number;
            maxRows: number;
        };
        modelValue: string;
        defaultValue: string;
        stopDisabled: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        stopDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
    }>> & {
        onStop?: (...args: any[]) => any;
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        value: string;
        autofocus: boolean;
        disabled: boolean;
        placeholder: string;
        autosize: {
            minRows: number;
            maxRows: number;
        };
        modelValue: string;
        defaultValue: string;
        stopDisabled: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    stopDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: {
            minRows: number;
            maxRows: number;
        };
    };
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
}>> & {
    onStop?: (...args: any[]) => any;
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onSend?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("stop" | "blur" | "focus" | "send" | "update:modelValue")[], "stop" | "blur" | "focus" | "send" | "update:modelValue", {
    value: string;
    autofocus: boolean;
    disabled: boolean;
    placeholder: string;
    autosize: {
        minRows: number;
        maxRows: number;
    };
    modelValue: string;
    defaultValue: string;
    stopDisabled: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatContent: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        avatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        content: {
            type: import("vue").PropType<string>;
            default: string;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        role: {
            type: import("vue").PropType<import("./type").ModelRoleEnum>;
            default: string;
            validator(val: string): boolean;
        };
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        variant: {
            type: import("vue").PropType<import("./type").Variant>;
            default: string;
            validator(val: string): boolean;
        };
        movable: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        animation: {
            type: import("vue").PropType<string>;
            default: string;
            validator(val: string): boolean;
        };
        itemIndex: {
            type: import("vue").PropType<Number>;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
        disabled: import("vue").PropType<boolean>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        avatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        content: {
            type: import("vue").PropType<string>;
            default: string;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        role: {
            type: import("vue").PropType<import("./type").ModelRoleEnum>;
            default: string;
            validator(val: string): boolean;
        };
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        variant: {
            type: import("vue").PropType<import("./type").Variant>;
            default: string;
            validator(val: string): boolean;
        };
        movable: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        animation: {
            type: import("vue").PropType<string>;
            default: string;
            validator(val: string): boolean;
        };
        itemIndex: {
            type: import("vue").PropType<Number>;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
        disabled: import("vue").PropType<boolean>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
    }>>, {
        reverse: boolean;
        animation: string;
        content: string;
        layout: import("./type").Layout;
        role: import("./type").ModelRoleEnum;
        autosize: {
            minRows: number;
            maxRows: number;
        };
        isGood: Boolean;
        isBad: Boolean;
        isStreamLoad: boolean;
        clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        textLoading: boolean;
        variant: import("./type").Variant;
        movable: Boolean;
        operationBtn: import("./props").operationBtnType[];
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
        };
        name: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        avatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        content: {
            type: import("vue").PropType<string>;
            default: string;
        };
        datetime: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        role: {
            type: import("vue").PropType<import("./type").ModelRoleEnum>;
            default: string;
            validator(val: string): boolean;
        };
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        isStreamLoad: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clearHistory: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        reverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        textLoading: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<TdChatItemProps[]>;
        };
        variant: {
            type: import("vue").PropType<import("./type").Variant>;
            default: string;
            validator(val: string): boolean;
        };
        movable: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        animation: {
            type: import("vue").PropType<string>;
            default: string;
            validator(val: string): boolean;
        };
        itemIndex: {
            type: import("vue").PropType<Number>;
        };
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
        disabled: import("vue").PropType<boolean>;
        onSend: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
        onStop: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context: {
            e: MouseEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onScroll: import("vue").PropType<(e: Event) => void>;
        onFocus: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        onBlur: import("vue").PropType<(value: string, context: {
            e: FocusEvent;
        }) => void>;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: {
                minRows: number;
                maxRows: number;
            };
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        reverse: boolean;
        animation: string;
        content: string;
        layout: import("./type").Layout;
        role: import("./type").ModelRoleEnum;
        autosize: {
            minRows: number;
            maxRows: number;
        };
        isGood: Boolean;
        isBad: Boolean;
        isStreamLoad: boolean;
        clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        textLoading: boolean;
        variant: import("./type").Variant;
        movable: Boolean;
        operationBtn: import("./props").operationBtnType[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    actions: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
    };
    name: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    avatar: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    content: {
        type: import("vue").PropType<string>;
        default: string;
    };
    datetime: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    role: {
        type: import("vue").PropType<import("./type").ModelRoleEnum>;
        default: string;
        validator(val: string): boolean;
    };
    isGood: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    isBad: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    isStreamLoad: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    clearHistory: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    reverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    textLoading: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    data: {
        type: import("vue").PropType<TdChatItemProps[]>;
    };
    variant: {
        type: import("vue").PropType<import("./type").Variant>;
        default: string;
        validator(val: string): boolean;
    };
    movable: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    animation: {
        type: import("vue").PropType<string>;
        default: string;
        validator(val: string): boolean;
    };
    itemIndex: {
        type: import("vue").PropType<Number>;
    };
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
    disabled: import("vue").PropType<boolean>;
    onSend: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onStop: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e: MouseEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onScroll: import("vue").PropType<(e: Event) => void>;
    onFocus: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onBlur: import("vue").PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: {
            minRows: number;
            maxRows: number;
        };
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    reverse: boolean;
    animation: string;
    content: string;
    layout: import("./type").Layout;
    role: import("./type").ModelRoleEnum;
    autosize: {
        minRows: number;
        maxRows: number;
    };
    isGood: Boolean;
    isBad: Boolean;
    isStreamLoad: boolean;
    clearHistory: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    textLoading: boolean;
    variant: import("./type").Variant;
    movable: Boolean;
    operationBtn: import("./props").operationBtnType[];
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatAI: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        model: {
            type: StringConstructor;
            default: string;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "operation")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        model: {
            type: StringConstructor;
            default: string;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, {
        footer: boolean;
        layout: import("./type").Layout;
        operationBtn: import("./props").operationBtnType[];
        welcome: unknown[];
        userMeta: {};
        assistantMeta: {};
        showUserMsg: boolean;
        model: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        model: {
            type: StringConstructor;
            default: string;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        footer: boolean;
        layout: import("./type").Layout;
        operationBtn: import("./props").operationBtnType[];
        welcome: unknown[];
        userMeta: {};
        assistantMeta: {};
        showUserMsg: boolean;
        model: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    apiKey: {
        type: StringConstructor;
    };
    welcome: {
        type: ArrayConstructor;
        default: () => String[];
    };
    userMeta: {
        type: import("vue").PropType<import("./type").MetaData>;
        default(): {};
    };
    assistantMeta: {
        type: import("vue").PropType<import("./type").MetaData>;
        default(): {};
    };
    footer: {
        type: BooleanConstructor;
        default: boolean;
    };
    showUserMsg: {
        type: BooleanConstructor;
        default: boolean;
    };
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    chatRequest: {
        type: FunctionConstructor;
    };
    model: {
        type: StringConstructor;
        default: string;
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
}>> & {
    onClear?: (...args: any[]) => any;
    onOperation?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "operation")[], "clear" | "operation", {
    footer: boolean;
    layout: import("./type").Layout;
    operationBtn: import("./props").operationBtnType[];
    welcome: unknown[];
    userMeta: {};
    assistantMeta: {};
    showUserMsg: boolean;
    model: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatMofa: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        mofaId: {
            type: StringConstructor;
            required: true;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "operation")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        mofaId: {
            type: StringConstructor;
            required: true;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, {
        footer: boolean;
        layout: import("./type").Layout;
        operationBtn: import("./props").operationBtnType[];
        welcome: unknown[];
        userMeta: {};
        assistantMeta: {};
        showUserMsg: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        apiKey: {
            type: StringConstructor;
        };
        mofaId: {
            type: StringConstructor;
            required: true;
        };
        welcome: {
            type: ArrayConstructor;
            default: () => String[];
        };
        userMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        assistantMeta: {
            type: import("vue").PropType<import("./type").MetaData>;
            default(): {};
        };
        footer: {
            type: BooleanConstructor;
            default: boolean;
        };
        showUserMsg: {
            type: BooleanConstructor;
            default: boolean;
        };
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        chatRequest: {
            type: FunctionConstructor;
        };
        layout: {
            type: import("vue").PropType<import("./type").Layout>;
            default: string;
            validator(val: string): boolean;
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onClear?: (...args: any[]) => any;
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        footer: boolean;
        layout: import("./type").Layout;
        operationBtn: import("./props").operationBtnType[];
        welcome: unknown[];
        userMeta: {};
        assistantMeta: {};
        showUserMsg: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    apiKey: {
        type: StringConstructor;
    };
    mofaId: {
        type: StringConstructor;
        required: true;
    };
    welcome: {
        type: ArrayConstructor;
        default: () => String[];
    };
    userMeta: {
        type: import("vue").PropType<import("./type").MetaData>;
        default(): {};
    };
    assistantMeta: {
        type: import("vue").PropType<import("./type").MetaData>;
        default(): {};
    };
    footer: {
        type: BooleanConstructor;
        default: boolean;
    };
    showUserMsg: {
        type: BooleanConstructor;
        default: boolean;
    };
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    chatRequest: {
        type: FunctionConstructor;
    };
    layout: {
        type: import("vue").PropType<import("./type").Layout>;
        default: string;
        validator(val: string): boolean;
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
}>> & {
    onClear?: (...args: any[]) => any;
    onOperation?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "operation")[], "clear" | "operation", {
    footer: boolean;
    layout: import("./type").Layout;
    operationBtn: import("./props").operationBtnType[];
    welcome: unknown[];
    userMeta: {};
    assistantMeta: {};
    showUserMsg: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ChatAction: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string>;
            default: string;
        };
        disabled: import("vue").PropType<boolean>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string>;
            default: string;
        };
        disabled: import("vue").PropType<boolean>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, {
        content: string;
        isGood: Boolean;
        isBad: Boolean;
        operationBtn: import("./props").operationBtnType[];
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        isGood: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        isBad: {
            type: import("vue").PropType<Boolean>;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string>;
            default: string;
        };
        disabled: import("vue").PropType<boolean>;
        operationBtn: {
            type: import("vue").PropType<import("./props").operationBtnType[]>;
            default: string[];
        };
        onOperation: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
            index?: number;
            item?: TdChatItemProps;
        }) => void>;
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        content: string;
        isGood: Boolean;
        isBad: Boolean;
        operationBtn: import("./props").operationBtnType[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    isGood: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    isBad: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    content: {
        type: import("vue").PropType<string>;
        default: string;
    };
    disabled: import("vue").PropType<boolean>;
    operationBtn: {
        type: import("vue").PropType<import("./props").operationBtnType[]>;
        default: string[];
    };
    onOperation: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
        index?: number;
        item?: TdChatItemProps;
    }) => void>;
}>> & {
    onOperation?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], "operation", {
    content: string;
    isGood: Boolean;
    isBad: Boolean;
    operationBtn: import("./props").operationBtnType[];
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Chat;
