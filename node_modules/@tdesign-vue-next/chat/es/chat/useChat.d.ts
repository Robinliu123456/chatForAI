export declare function useChat(props: any, emit: any): {
    chatList: import("vue").Ref<{
        actions?: ((h: typeof import("vue").h) => import("..").SlotReturnValue)[];
        name?: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        avatar?: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        content?: string;
        datetime?: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        role?: import("./type").ModelRoleEnum;
        textLoading?: boolean;
        variant?: import("./type").Variant;
        movable?: {
            valueOf: () => boolean;
        };
        animation?: string;
        itemIndex?: {
            toString: (radix?: number) => string;
            toFixed: (fractionDigits?: number) => string;
            toExponential: (fractionDigits?: number) => string;
            toPrecision: (precision?: number) => string;
            valueOf: () => number;
            toLocaleString: {
                (locales?: string | string[], options?: Intl.NumberFormatOptions): string;
                (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string;
            };
        };
    }[]>;
    loading: import("vue").Ref<boolean>;
    isStreamLoad: import("vue").Ref<boolean>;
    onStop: () => void;
    setChatList: (inputValue: string) => void;
    operation: (type: string, options: {
        e: MouseEvent;
        index: number;
    }) => void;
    clearConfirm: (context: {
        e: MouseEvent;
    }) => void;
    sendRequest: (type: string, inputValue: string, modelOrMofaId?: string) => Promise<void>;
};
