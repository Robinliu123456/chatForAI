/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var tdesignVueNext = require('tdesign-vue-next');
var chat_props = require('./props.js');
var hooks_useVModel = require('../hooks/useVModel.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-87b09796.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-e014d0cb.js');
require('../_chunks/dep-25af0a61.js');
require('lodash/isArray');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var _ChatInput = vue.defineComponent({
  name: "TChatInput",
  components: {
    RectangleIcon: tdesignIconsVueNext.RectangleIcon,
    SendIcon: tdesignIconsVueNext.SendIcon,
    TButton: tdesignVueNext.Button,
    TRow: tdesignVueNext.Row,
    TTextarea: tdesignVueNext.Textarea,
    TLoading: tdesignVueNext.Loading
  },
  props: {
    modelValue: {
      type: String,
      "default": ""
    },
    value: {
      type: String,
      "default": ""
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": "\u8BF7\u8F93\u5165\u6D88\u606F..."
    },
    stopDisabled: {
      type: Boolean,
      "default": false
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    autofocus: {
      type: Boolean,
      "default": false
    },
    autosize: chat_props["default"].autosize,
    onSend: chat_props["default"].onSend,
    onStop: chat_props["default"].onStop,
    onChange: chat_props["default"].onChange,
    onBlur: chat_props["default"].onBlur,
    onFocus: chat_props["default"].onFocus
  },
  emits: ["send", "stop", "update:modelValue", "blur", "focus"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots,
      emit = _ref.emit;
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("chat");
    var _toRefs = vue.toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = hooks_useVModel["default"](value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      textValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var disabled = vue.computed(function () {
      return props2.stopDisabled;
    });
    var textareaDisabled = vue.computed(function () {
      return props2.disabled;
    });
    var autofocus = vue.computed(function () {
      return props2.autofocus;
    });
    var autosize = vue.computed(function () {
      return props2.autosize;
    });
    var shiftDownFlag = false;
    var isComposition = false;
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var suffixIcon = renderTNodeJSX("suffixIcon") || slots.suffixIcon;
    var sendClick = function sendClick(e) {
      if (textValue.value && !disabled.value) {
        emit("send", textValue.value, {
          e: e
        });
        setInnerValue("", {
          e: e
        });
      }
    };
    var handleStop = function handleStop(e) {
      emit("stop", textValue.value, {
        e: e
      });
    };
    var textChange = function textChange(value2, context) {
      setInnerValue(value2, context);
    };
    var blurFn = function blurFn(value2, context) {
      emit("blur", value2, context);
    };
    var focusFn = function focusFn(value2, context) {
      emit("focus", value2, context);
    };
    var keydownFn = function keydownFn(value2, context) {
      var key = context.e.key;
      if (key === "Shift") {
        shiftDownFlag = true;
      }
      if (key === "Enter" && !shiftDownFlag && !isComposition) {
        context.e.cancelBubble = true;
        context.e.preventDefault();
        context.e.stopPropagation();
        sendClick(context.e);
      }
    };
    var keyupFn = function keyupFn(value2, context) {
      var key = context.e.key;
      if (key === "Shift") {
        shiftDownFlag = false;
      }
    };
    var compositionstartFn = function compositionstartFn() {
      isComposition = true;
    };
    var compositionendFn = function compositionendFn() {
      isComposition = false;
    };
    var getDefaultSuffixIcon = function getDefaultSuffixIcon() {
      return vue.createVNode(vue.resolveComponent("t-button"), {
        "theme": "default",
        "size": "small",
        "variant": "text",
        "class": ["".concat(COMPONENT_NAME.value, "__footer__textarea__icon__default"), textValue.value ? "".concat(COMPONENT_NAME.value, "__footer__textarea__icon--focus") : ""],
        "disabled": disabled.value || !textValue.value || textareaDisabled.value
      }, {
        "default": function _default() {
          return [vue.createVNode(tdesignIconsVueNext.SendIcon, null, null)];
        }
      });
    };
    var renderSuffixIcon = function renderSuffixIcon() {
      return suffixIcon ? suffixIcon : getDefaultSuffixIcon();
    };
    return function () {
      return vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__footer__content")
      }, [vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__footer__textarea")
      }, [vue.createVNode(vue.resolveComponent("t-textarea"), {
        "value": textValue.value,
        "class": "noscrollbar",
        "placeholder": props2.placeholder,
        "disabled": textareaDisabled.value,
        "autofocus": autofocus.value,
        "autosize": autosize.value,
        "onChange": textChange,
        "onBlur": blurFn,
        "onFocus": focusFn,
        "onKeydown": keydownFn,
        "onKeyup": keyupFn,
        "onCompositionstart": compositionstartFn,
        "onCompositionend": compositionendFn
      }, null), vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__footer__textarea__icon"),
        "onClick": sendClick
      }, [renderSuffixIcon()])]), disabled.value && !textareaDisabled.value && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__footer__stopbtn")
      }, [vue.createVNode(vue.resolveComponent("t-button"), {
        "variant": "outline",
        "onClick": handleStop
      }, {
        "default": function _default() {
          return [vue.createVNode(tdesignIconsVueNext.StopCircleIcon, {
            "slot": "icon"
          }, null), "\u4E2D\u6B62"];
        }
      })])]);
    };
  }
});

exports["default"] = _ChatInput;
//# sourceMappingURL=chat-input.js.map
