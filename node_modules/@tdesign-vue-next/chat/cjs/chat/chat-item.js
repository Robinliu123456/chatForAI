/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var chat_props = require('./props.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_tnode = require('../hooks/tnode.js');
var chat_chatContent = require('./chat-content.js');
var isString = require('lodash/isString');
var isArray = require('lodash/isArray');
var tdesignVueNext = require('tdesign-vue-next');
var chat_chatLoading = require('./chat-loading.js');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-87b09796.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-e014d0cb.js');
require('../_chunks/dep-25af0a61.js');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('clipboard');
require('highlight.js');
require('marked');
require('marked-highlight');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var isString__default = /*#__PURE__*/_interopDefaultLegacy(isString);
var isArray__default = /*#__PURE__*/_interopDefaultLegacy(isArray);

var ChatItem = vue.defineComponent({
  name: "TChatItem",
  components: {
    TSkeleton: tdesignVueNext.Skeleton,
    TButton: tdesignVueNext.Button,
    TIcon: tdesignVueNext.Icon,
    TSpace: tdesignVueNext.Space,
    Text: chat_chatContent["default"]
  },
  props: chat_props["default"],
  emits: ["operation"],
  setup: function setup(props2, _ref) {
    _ref.emit;
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("chat");
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var role = vue.computed(function () {
      return renderTNodeJSX("role");
    });
    var variant = vue.computed(function () {
      return renderTNodeJSX("variant");
    });
    vue.provide("role", role.value);
    return function () {
      if (role.value === "model-change") {
        var content2 = renderTNodeJSX("content");
        var modelChangeDom = vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__notice"),
          "innerHTML": content2
        }, null);
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner model-change")
        }, [modelChangeDom]);
      }
      var roleValue = renderTNodeJSX("role");
      var movable = renderTNodeJSX("movable");
      var name = renderTNodeJSX("name");
      var datetime = renderTNodeJSX("datetime");
      var avatar = renderTNodeJSX("avatar");
      var shownameDatetime = vue.computed(function () {
        return name || datetime;
      });
      var contentClasses = vue.computed(function () {
        return shownameDatetime.value ? ["".concat(COMPONENT_NAME.value, "__content")] : ["".concat(COMPONENT_NAME.value, "__content"), "".concat(COMPONENT_NAME.value, "__content--base")];
      });
      var avatarDom = avatar ? vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__avatar")
      }, [vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__avatar__box")
      }, [isString__default["default"](avatar) ? vue.createVNode("img", {
        "src": avatar,
        "alt": "",
        "class": "".concat(COMPONENT_NAME.value, "__avatar-image")
      }, null) : avatar])]) : null;
      var nameDatetimeDom = shownameDatetime.value && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__base")
      }, [name && vue.createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__name")
      }, [name]), datetime && vue.createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__time")
      }, [datetime])]);
      var textLoading = props2.textLoading;
      var content = renderTNodeJSX("content");
      var showActions = vue.computed(function () {
        return renderTNodeJSX("actions");
      });
      var contentDom = vue.createVNode(vue.Fragment, null, [avatarDom, vue.createVNode("div", {
        "class": contentClasses.value
      }, [nameDatetimeDom, textLoading && vue.createVNode(vue.resolveComponent("t-skeleton"), {
        "loading": textLoading,
        "animation": "gradient"
      }, null), textLoading && movable && vue.createVNode(chat_chatLoading["default"], {
        "loading": textLoading,
        "animation": "gradient"
      }, null), !textLoading && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__detail")
      }, [isArray__default["default"](content) ? content : vue.createVNode(chat_chatContent["default"], {
        "isNormalText": false,
        "content": content,
        "role": role.value
      }, null)]), role.value === "assistant" && showActions.value && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__actions-margin")
      }, [renderTNodeJSX("actions")])])]);
      return vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__inner ").concat(roleValue, " ").concat(COMPONENT_NAME.value, "__text--variant--").concat(variant.value)
      }, [contentDom]);
    };
  }
});

exports["default"] = ChatItem;
//# sourceMappingURL=chat-item.js.map
