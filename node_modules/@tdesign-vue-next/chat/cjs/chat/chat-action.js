/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var chat_props = require('./props.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_tnode = require('../hooks/tnode.js');
var tdesignVueNext = require('tdesign-vue-next');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var Clipboard = require('clipboard');
var chat_util = require('./util.js');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('lodash/isString');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-87b09796.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-e014d0cb.js');
require('../_chunks/dep-25af0a61.js');
require('lodash/isArray');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/defineProperty');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Clipboard__default = /*#__PURE__*/_interopDefaultLegacy(Clipboard);

var _ChatAction = vue.defineComponent({
  name: "TChatAction",
  components: {
    TSkeleton: tdesignVueNext.Skeleton,
    TButton: tdesignVueNext.Button,
    TIcon: tdesignVueNext.Icon,
    TSpace: tdesignVueNext.Space
  },
  props: {
    isGood: chat_props["default"].isGood,
    isBad: chat_props["default"].isBad,
    content: chat_props["default"].content,
    disabled: chat_props["default"].disabled,
    operationBtn: chat_props["default"].operationBtn,
    onOperation: chat_props["default"].onOperation
  },
  emits: ["operation"],
  setup: function setup(props2, _ref) {
    var emit = _ref.emit;
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("chat");
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var messagePluginInstance = chat_util.MessagePluginSingleton.getInstance();
    return function () {
      var content = renderTNodeJSX("content");
      var disabled = props2.disabled;
      var copyAnswer = function copyAnswer() {
        var copyBtn = new Clipboard__default["default"](".copy-btn");
        copyBtn.on("success", function () {
          messagePluginInstance.showSuccess();
        });
        copyBtn.on("error", function () {
          messagePluginInstance.showError();
        });
      };
      var handleClick = function handleClick(e, type) {
        if (type === "copy") {
          copyAnswer();
        }
        emit("operation", type, {
          e: e
        });
      };
      var replayButton = props2.operationBtn.includes("replay") ? vue.createVNode(vue.resolveComponent("t-space"), null, {
        "default": function _default() {
          return [vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__refresh")
          }, [vue.createVNode(vue.resolveComponent("t-tooltip"), {
            "content": "\u91CD\u65B0\u751F\u6210"
          }, {
            "default": function _default() {
              return [vue.createVNode(vue.resolveComponent("t-button"), {
                "theme": "default",
                "size": "small",
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "replay");
                }
              }, {
                "default": function _default() {
                  return [vue.createVNode(tdesignIconsVueNext.RefreshIcon, null, null)];
                }
              })];
            }
          }), vue.createVNode("span", {
            "class": "".concat(COMPONENT_NAME.value, "__refresh-line")
          }, null)])];
        }
      }) : null;
      var copyButton = props2.operationBtn.includes("copy") ? vue.createVNode(vue.resolveComponent("t-space"), null, {
        "default": function _default() {
          return [vue.createVNode(vue.resolveComponent("t-tooltip"), {
            "content": "\u590D\u5236"
          }, {
            "default": function _default() {
              return [vue.createVNode(vue.resolveComponent("t-button"), {
                "theme": "default",
                "size": "small",
                "class": "copy-btn",
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "copy");
                },
                "data-clipboard-text": content
              }, {
                "default": function _default() {
                  return [vue.createVNode(tdesignIconsVueNext.CopyIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var goodButton = props2.operationBtn.includes("good") ? vue.createVNode(vue.resolveComponent("t-space"), null, {
        "default": function _default() {
          return [vue.createVNode(vue.resolveComponent("t-tooltip"), {
            "content": "\u70B9\u8D5E"
          }, {
            "default": function _default() {
              return [vue.createVNode(vue.resolveComponent("t-button"), {
                "theme": "default",
                "size": "small",
                "class": props2.isGood && "".concat(COMPONENT_NAME.value, "-button--active"),
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "good");
                }
              }, {
                "default": function _default() {
                  return [vue.createVNode(tdesignIconsVueNext.ThumbUpIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var badButton = props2.operationBtn.includes("bad") ? vue.createVNode(vue.resolveComponent("t-space"), null, {
        "default": function _default() {
          return [vue.createVNode(vue.resolveComponent("t-tooltip"), {
            "content": "\u70B9\u8E29"
          }, {
            "default": function _default() {
              return [vue.createVNode(vue.resolveComponent("t-button"), {
                "theme": "default",
                "size": "small",
                "class": props2.isBad && "".concat(COMPONENT_NAME.value, "-button--active"),
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "bad");
                }
              }, {
                "default": function _default() {
                  return [vue.createVNode(tdesignIconsVueNext.ThumbDownIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var buttonComponents = {
        replay: replayButton,
        copy: copyButton,
        good: goodButton,
        bad: badButton
      };
      return vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__actions")
      }, [props2.operationBtn.map(function (btnKey) {
        return buttonComponents[btnKey];
      })]);
    };
  }
});

exports["default"] = _ChatAction;
//# sourceMappingURL=chat-action.js.map
