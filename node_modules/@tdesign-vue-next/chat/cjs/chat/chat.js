/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var chat_props = require('./props.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_tnode = require('../hooks/tnode.js');
var chat_chatItem = require('./chat-item.js');
var isArray = require('lodash/isArray');
var tdesignVueNext = require('tdesign-vue-next');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('lodash/isString');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-87b09796.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-e014d0cb.js');
require('../_chunks/dep-25af0a61.js');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('./chat-content.js');
require('clipboard');
require('highlight.js');
require('marked');
require('marked-highlight');
require('./chat-loading.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var isArray__default = /*#__PURE__*/_interopDefaultLegacy(isArray);

var handleScrollToBottom = function handleScrollToBottom(target, behavior) {
  var currentScrollHeight = target.scrollHeight;
  var currentClientHeight = target.clientHeight;
  var innerBehavior = behavior !== null && behavior !== void 0 ? behavior : "auto";
  if (innerBehavior === "auto") {
    target.scrollTop = currentScrollHeight - currentClientHeight;
  } else {
    var startScrollTop = target.scrollTop;
    var endScrollTop = currentScrollHeight - currentClientHeight;
    var duration = 300;
    var step = (endScrollTop - startScrollTop) / duration;
    var startTime;
    var animateScroll = function animateScroll(time) {
      if (!startTime) {
        startTime = time;
      }
      var elapsed = time - startTime;
      var top = Math.min(endScrollTop, startScrollTop + elapsed * step);
      target.scrollTop = top;
      if (top < endScrollTop) {
        requestAnimationFrame(animateScroll);
      }
    };
    requestAnimationFrame(animateScroll);
  }
};
var _Chat = vue.defineComponent({
  name: "TChat",
  components: {
    TDivider: tdesignVueNext.Divider,
    TPopconfirm: tdesignVueNext.Popconfirm,
    TIcon: tdesignVueNext.Icon,
    ChatItem: chat_chatItem["default"]
  },
  props: {
    data: chat_props["default"].data,
    layout: chat_props["default"].layout,
    clearHistory: chat_props["default"].clearHistory,
    reverse: chat_props["default"].reverse,
    isStreamLoad: chat_props["default"].isStreamLoad,
    textLoading: chat_props["default"].textLoading,
    onClear: chat_props["default"].onClear,
    onScroll: chat_props["default"].onScroll
  },
  emits: ["clear", "scroll"],
  setup: function setup(props2, _ref) {
    _ref.slots;
      var emit = _ref.emit,
      expose = _ref.expose;
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("chat");
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    vue.provide("textLoading", props2.textLoading);
    vue.provide("reverse", props2.reverse);
    var classes = vue.computed(function () {
      return [COMPONENT_NAME.value, _defineProperty__default["default"]({}, "".concat(COMPONENT_NAME.value, "--normal"), props2.layout === "both")];
    });
    var listClasses = vue.computed(function () {
      return ["".concat(COMPONENT_NAME.value, "__list"), _defineProperty__default["default"]({}, "".concat(COMPONENT_NAME.value, "__list--reverse"), props2.reverse)];
    });
    var renderBody = function renderBody() {
      var data = renderTNodeJSX("data") || props2.data;
      if (isArray__default["default"](data) && data.length > 0) {
        var isLoading = function isLoading(index) {
          return (props2.reverse ? index === 0 : index === data.length - 1) && props2.textLoading;
        };
        return data.map(function (item, index) {
          return vue.createVNode(chat_chatItem["default"], {
            "avatar": item.avatar,
            "name": item.name,
            "role": item.role,
            "datetime": item.datetime,
            "content": item.content,
            "text-loading": isLoading(index),
            "itemIndex": index
          }, null);
        });
      } else {
        return renderTNodeJSX("default");
      }
    };
    var clearConfirm = function clearConfirm(context) {
      emit("clear", context);
    };
    var defaultClearHistory = vue.createVNode(tdesignVueNext.Popconfirm, {
      "content": "\u786E\u5B9A\u8981\u6E05\u7A7A\u6240\u6709\u7684\u6D88\u606F\u5417\uFF1F",
      "onConfirm": clearConfirm
    }, {
      "default": function _default() {
        return [vue.createVNode(tdesignVueNext.Divider, {
          "class": "clear-btn"
        }, {
          "default": function _default() {
            return [vue.createVNode(tdesignVueNext.Icon, {
              "name": "clear",
              "size": "14px"
            }, null), vue.createVNode("span", {
              "class": "clear-btn-text"
            }, ["\u6E05\u7A7A\u5386\u53F2\u8BB0\u5F55"])];
          }
        })];
      }
    });
    var showFooter = vue.computed(function () {
      return renderTNodeJSX("footer");
    });
    var chatBoxRef = vue.ref();
    var scrollToBottom = function scrollToBottom(data) {
      if (!chatBoxRef.value) return;
      var _data$behavior = data.behavior,
        behavior = _data$behavior === void 0 ? "auto" : _data$behavior;
      handleScrollToBottom(chatBoxRef.value, behavior);
    };
    var handleScroll = function handleScroll(e) {
      emit("scroll", {
        e: e
      });
    };
    expose({
      scrollToBottom: scrollToBottom
    });
    return function () {
      return vue.createVNode("div", {
        "class": classes.value
      }, [vue.createVNode("div", {
        "class": listClasses.value,
        "ref": chatBoxRef,
        "onScroll": handleScroll
      }, [props2.reverse && vue.createVNode("div", {
        "className": "place-holder"
      }, null), props2.reverse && props2.clearHistory && renderTNodeJSX("clearHistory", defaultClearHistory), renderBody(), !props2.reverse && props2.clearHistory && renderTNodeJSX("clearHistory", defaultClearHistory)]), showFooter.value && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__footer")
      }, [showFooter.value])]);
    };
  }
});

exports["default"] = _Chat;
//# sourceMappingURL=chat.js.map
