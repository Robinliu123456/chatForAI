/**
 * tdesign-vue-chat v0.1.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var chat_props = require('./props.js');
var chat_chat = require('./chat.js');
var chat_chatItem = require('./chat-item.js');
var chat_chatInput = require('./chat-input.js');
var chat_chatAction = require('./chat-action.js');
var chat_useChat = require('./useChat.js');
require('@babel/runtime/helpers/defineProperty');
require('../hooks/useConfig.js');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('lodash/isString');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-87b09796.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-e014d0cb.js');
require('../_chunks/dep-25af0a61.js');
require('lodash/isArray');
require('../hooks/tnode.js');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('tdesign-vue-next');
require('./chat-content.js');
require('clipboard');
require('highlight.js');
require('marked');
require('marked-highlight');
require('./chat-loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('tdesign-icons-vue-next');
require('../hooks/useVModel.js');
require('./util.js');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/asyncToGenerator');
require('@babel/runtime/regenerator');
require('./sseRequest.js');
require('@babel/runtime/helpers/toConsumableArray');
require('./sseRequest-hunyuan.js');

var _ChatAI = vue.defineComponent({
  name: "TChatAi",
  components: {
    Chat: chat_chat["default"],
    ChatItem: chat_chatItem["default"],
    ChatInput: chat_chatInput["default"],
    ChatAction: chat_chatAction["default"]
  },
  props: {
    apiKey: {
      type: String
    },
    welcome: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    userMeta: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    assistantMeta: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    footer: {
      type: Boolean,
      "default": true
    },
    showUserMsg: {
      type: Boolean,
      "default": true
    },
    operationBtn: chat_props["default"].operationBtn,
    layout: chat_props["default"].layout,
    chatRequest: {
      type: Function
    },
    model: {
      type: String,
      "default": ""
    },
    onOperation: chat_props["default"].onOperation
  },
  emits: ["operation", "clear"],
  setup: function setup(props2, _ref) {
    var emit = _ref.emit;
    var _useChat = chat_useChat.useChat(props2, emit),
      chatList = _useChat.chatList,
      loading = _useChat.loading,
      onStop = _useChat.onStop,
      operation = _useChat.operation,
      clearConfirm = _useChat.clearConfirm,
      isStreamLoad = _useChat.isStreamLoad,
      sendRequest = _useChat.sendRequest;
    var handleSend = function handleSend(inputValue) {
      sendRequest("hunyuan", inputValue, props2.model);
    };
    return function () {
      return vue.createVNode(chat_chat["default"], {
        "layout": props2.layout,
        "clearHistory": chatList.value.length > 0 && !isStreamLoad.value,
        "onClear": clearConfirm
      }, {
        "default": function _default() {
          return [chatList.value.map(function (item, index) {
            return vue.createVNode(chat_chatItem["default"], {
              "key": index,
              "avatar": item.avatar,
              "role": item.role,
              "datetime": item.datetime,
              "content": item.content,
              "text-loading": index === 0 && loading.value
            }, {
              actions: function actions() {
                return vue.createVNode(chat_chatAction["default"], {
                  "operationBtn": props2.operationBtn,
                  "content": item.content,
                  "onOperation": function onOperation(type, _ref2) {
                    var e = _ref2.e;
                    return operation(type, {
                      e: e,
                      index: index
                    });
                  }
                }, null);
              }
            });
          })];
        },
        footer: function footer() {
          return vue.createVNode(chat_chatInput["default"], {
            "stopDisabled": isStreamLoad.value,
            "onSend": handleSend,
            "onStop": onStop
          }, null);
        }
      });
    };
  }
});

exports["default"] = _ChatAI;
//# sourceMappingURL=chat-ai.js.map
