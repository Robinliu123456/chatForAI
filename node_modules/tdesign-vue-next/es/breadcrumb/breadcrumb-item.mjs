/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-96b403e3.mjs';
import { isVNode, defineComponent, ref, inject, computed, onMounted, onBeforeUpdate, createVNode, getCurrentInstance, mergeProps } from 'vue';
import { ChevronRightIcon } from 'tdesign-icons-vue-next';
import props from './breadcrumb-item-props.mjs';
import { Tooltip } from '../tooltip/index.mjs';
import { isTextEllipsis } from '../utils/dom.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { useContent, useTNodeJSX } from '../hooks/tnode.mjs';
import { isFunction } from 'lodash-es';
import '../_chunks/dep-7c8701fc.mjs';
import '../tooltip/tooltip.mjs';
import '../_chunks/dep-a3e567cf.mjs';
import '../_chunks/dep-6ac84404.mjs';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../utils/render-tnode.mjs';
import '../hooks/useCommonClassName.mjs';
import '../config-provider/useConfig.mjs';
import '../config-provider/context.mjs';
import '../_chunks/dep-2895d202.mjs';
import '../_chunks/dep-23a6b274.mjs';
import '../_chunks/dep-f9079916.mjs';
import '../_chunks/dep-c3b9ffc0.mjs';
import '../config-provider/type.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../_chunks/dep-4ad0839f.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useVModel.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_chunks/dep-53d9b6da.mjs';
import '../_chunks/dep-30c62f61.mjs';
import '../popup/container.mjs';
import '../_chunks/dep-87669a0e.mjs';
import '../hooks/useResizeObserver.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../tooltip/utils/index.mjs';
import '../tooltip/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var localTBreadcrumbOrigin = {
  separator: "",
  theme: "light",
  slots: {
    separator: ""
  },
  maxItemWidth: void 0
};
var _BreadcrumbItem = defineComponent({
  name: "TBreadcrumbItem",
  inheritAttrs: false,
  props: props,
  setup: function setup(props2, _ref) {
    var _localTBreadcrumb$slo;
    var attrs = _ref.attrs;
    var renderContent = useContent();
    var renderTNodeJSX = useTNodeJSX();
    var breadcrumbText = ref();
    var localTBreadcrumb = inject("tBreadcrumb", localTBreadcrumbOrigin);
    var themeClassName = ref(localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.theme);
    var isCutOff = ref(false);
    var COMPONENT_NAME = usePrefixClass("breadcrumb__item");
    var separatorClass = usePrefixClass("breadcrumb__separator");
    var disableClass = usePrefixClass("is-disabled");
    var linkClass = usePrefixClass("link");
    var maxLengthClass = usePrefixClass("breadcrumb__inner");
    var textFlowClass = usePrefixClass("breadcrumb--text-overflow");
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightIcon: ChevronRightIcon
      }),
      ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;
    var maxWithStyle = computed(function () {
      var maxItemWidth = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.maxItemWidth;
      var maxWith = props2.maxWidth || maxItemWidth || "120";
      return {
        maxWidth: "".concat(maxWith, "px")
      };
    });
    onMounted(function () {
      isCutOff.value = isTextEllipsis(breadcrumbText.value);
    });
    onBeforeUpdate(function () {
      isCutOff.value = isTextEllipsis(breadcrumbText.value);
    });
    var separatorPropContent = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.separator;
    var separatorSlot = localTBreadcrumb === null || localTBreadcrumb === void 0 || (_localTBreadcrumb$slo = localTBreadcrumb.slots) === null || _localTBreadcrumb$slo === void 0 ? void 0 : _localTBreadcrumb$slo.separator;
    var separatorContent = separatorPropContent || separatorSlot || createVNode(ChevronRightIcon$1, {
      color: "rgba(0,0,0,.3)"
    }, null);
    var _getCurrentInstance = getCurrentInstance(),
      proxy = _getCurrentInstance.proxy;
    var handleClick = function handleClick() {
      var router = props2.router || proxy.$router;
      if (props2.to && router) {
        props2.replace ? router.replace(props2.to) : router.push(props2.to);
      } else {
        window.location.href = props2.href;
      }
    };
    var bindEvent = function bindEvent(e) {
      if (!props2.disabled) {
        e.preventDefault();
        if (props2.target === "_blank") {
          props2.href ? window.open(props2.href) : window.open(props2.to);
        } else {
          handleClick();
        }
      }
    };
    return function () {
      var itemClass = [COMPONENT_NAME.value, themeClassName.value];
      var textClass = [textFlowClass.value];
      if (props2.disabled) {
        textClass.push(disableClass.value);
      }
      var listeners = {
        onClick: function onClick(e) {
          if (props2.disabled) {
            e.stopPropagation();
            return;
          }
        }
      };
      var _content = renderContent("default", "content");
      var textContent = createVNode("span", {
        "class": maxLengthClass.value,
        style: maxWithStyle.value
      }, [renderTNodeJSX("icon"), createVNode("span", {
        "ref": breadcrumbText,
        "class": "".concat(maxLengthClass.value, "-text")
      }, [_content])]);
      var itemContent = createVNode("span", _objectSpread({
        "class": textClass
      }, listeners), [textContent]);
      if ((props2.href || props2.to) && !props2.disabled) {
        textClass.push(linkClass.value);
        itemContent = createVNode("a", mergeProps({
          "class": textClass,
          "href": props2.href,
          "target": props2.target
        }, listeners, {
          "onClick": bindEvent
        }), [textContent]);
      }
      return createVNode("div", mergeProps({
        "class": itemClass
      }, attrs, {
        "onClick": !props2.disabled && props2.onClick
      }), [isCutOff.value ? createVNode(Tooltip, {
        "content": function content() {
          return _content;
        }
      }, _isSlot(itemContent) ? itemContent : {
        "default": function _default() {
          return [itemContent];
        }
      }) : itemContent, createVNode("span", {
        "class": separatorClass.value,
        "style": {
          textOverflow: isCutOff.value ? "ellipsis" : "clip"
        }
      }, [isFunction(separatorContent) ? separatorContent() : separatorContent])]);
    };
  }
});

export { _BreadcrumbItem as default };
//# sourceMappingURL=breadcrumb-item.mjs.map
