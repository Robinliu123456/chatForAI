/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-96b403e3.mjs';
import { defineComponent, toRefs, computed, createVNode, Fragment } from 'vue';
import { CloseIcon, InfoCircleFilledIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon } from 'tdesign-icons-vue-next';
import dialogCardProps from './dialog-card-props.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useAction } from './hooks.mjs';
import { useTNodeJSX, useContent } from '../hooks/tnode.mjs';
import props from './props.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-7c8701fc.mjs';
import 'lodash-es';
import '../button/index.mjs';
import '../button/button.mjs';
import '../_chunks/dep-87669a0e.mjs';
import '../_chunks/dep-6ac84404.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../_chunks/dep-433c4f57.mjs';
import '../_chunks/dep-a3e567cf.mjs';
import '../loading/icon/gradient.mjs';
import '../_chunks/dep-4ad0839f.mjs';
import '../_chunks/dep-5211a143.mjs';
import '../_chunks/dep-e155a416.mjs';
import '../utils/dom.mjs';
import '../_chunks/dep-23a6b274.mjs';
import '../utils/render-tnode.mjs';
import '../loading/props.mjs';
import '../hooks/useTeleport.mjs';
import '../config-provider/context.mjs';
import '../_chunks/dep-2895d202.mjs';
import '../_chunks/dep-f9079916.mjs';
import '../_chunks/dep-c3b9ffc0.mjs';
import '../config-provider/type.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../loading/type.mjs';
import '../button/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useDisabled.mjs';
import '../button/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _DialogCard = defineComponent({
  name: "TDialogCard",
  props: _objectSpread(_objectSpread({}, props), dialogCardProps),
  setup: function setup(props) {
    var COMPONENT_NAME = usePrefixClass("dialog");
    var classPrefix = usePrefixClass();
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var _useConfig = useConfig("dialog"),
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: CloseIcon,
        InfoCircleFilledIcon: InfoCircleFilledIcon,
        CheckCircleFilledIcon: CheckCircleFilledIcon,
        ErrorCircleFilledIcon: ErrorCircleFilledIcon
      }),
      CloseIcon$1 = _useGlobalIcon.CloseIcon,
      InfoCircleFilledIcon$1 = _useGlobalIcon.InfoCircleFilledIcon,
      CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon;
    var _toRefs = toRefs(props),
      cancelBtn = _toRefs.cancelBtn,
      confirmBtn = _toRefs.confirmBtn,
      confirmLoading = _toRefs.confirmLoading;
    var confirmBtnAction = function confirmBtnAction(e) {
      var _props$onConfirm;
      return (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
        e: e
      });
    };
    var cancelBtnAction = function cancelBtnAction(e) {
      var _props$onCancel;
      return (_props$onCancel = props.onCancel) === null || _props$onCancel === void 0 ? void 0 : _props$onCancel.call(props, {
        e: e
      });
    };
    var _useAction = useAction({
        confirmBtnAction: confirmBtnAction,
        cancelBtnAction: cancelBtnAction
      }),
      getConfirmBtn = _useAction.getConfirmBtn,
      getCancelBtn = _useAction.getCancelBtn;
    var isModeLess = computed(function () {
      return props.mode === "modeless";
    });
    var isFullScreen = computed(function () {
      return props.mode === "full-screen";
    });
    var defaultFooter = createVNode("div", null, [getCancelBtn({
      cancelBtn: cancelBtn.value,
      globalCancel: globalConfig.value.cancel,
      className: "".concat(COMPONENT_NAME.value, "__cancel")
    }), getConfirmBtn({
      theme: props === null || props === void 0 ? void 0 : props.theme,
      confirmBtn: confirmBtn.value,
      globalConfirm: globalConfig.value.confirm,
      globalConfirmBtnTheme: globalConfig.value.confirmBtnTheme,
      className: "".concat(COMPONENT_NAME.value, "__confirm"),
      confirmLoading: confirmLoading.value
    })]);
    var footerContent = renderTNodeJSX("footer", defaultFooter);
    var footerClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--fullscreen")] : "".concat(COMPONENT_NAME.value, "__footer");
    var closeBtnAction = function closeBtnAction(e) {
      var _props$onCloseBtnClic;
      return props === null || props === void 0 || (_props$onCloseBtnClic = props.onCloseBtnClick) === null || _props$onCloseBtnClic === void 0 ? void 0 : _props$onCloseBtnClic.call(props, {
        e: e
      });
    };
    var onStopDown = function onStopDown(e) {
      if (isModeLess.value && props !== null && props !== void 0 && props.draggable) e.stopPropagation();
    };
    var renderHeader = function renderHeader() {
      var _renderTNodeJSX;
      var header = (_renderTNodeJSX = renderTNodeJSX("header", createVNode("h5", {
        "class": "title"
      }, null))) !== null && _renderTNodeJSX !== void 0 ? _renderTNodeJSX : false;
      var headerClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__header"), "".concat(COMPONENT_NAME.value, "__header--fullscreen")] : "".concat(COMPONENT_NAME.value, "__header");
      var closeClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__close"), "".concat(COMPONENT_NAME.value, "__close--fullscreen")] : "".concat(COMPONENT_NAME.value, "__close");
      var getIcon = function getIcon() {
        var icon = {
          info: createVNode(InfoCircleFilledIcon$1, {
            "class": "".concat(classPrefix.value, "-is-info")
          }, null),
          warning: createVNode(ErrorCircleFilledIcon$1, {
            "class": "".concat(classPrefix.value, "-is-warning")
          }, null),
          danger: createVNode(ErrorCircleFilledIcon$1, {
            "class": "".concat(classPrefix.value, "-is-error")
          }, null),
          success: createVNode(CheckCircleFilledIcon$1, {
            "class": "".concat(classPrefix.value, "-is-success")
          }, null)
        };
        return icon[props === null || props === void 0 ? void 0 : props.theme];
      };
      return (header || (props === null || props === void 0 ? void 0 : props.closeBtn)) && createVNode("div", {
        "class": headerClassName,
        "onMousedown": onStopDown
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__header-content")
      }, [getIcon(), header]), props !== null && props !== void 0 && props.closeBtn ? createVNode("span", {
        "class": closeClassName,
        "onClick": closeBtnAction
      }, [renderTNodeJSX("closeBtn", createVNode(CloseIcon$1, null, null))]) : null]);
    };
    var renderBody = function renderBody() {
      var body = renderContent("default", "body");
      var bodyClassName = (props === null || props === void 0 ? void 0 : props.theme) === "default" ? ["".concat(COMPONENT_NAME.value, "__body")] : ["".concat(COMPONENT_NAME.value, "__body__icon")];
      if (isFullScreen.value && footerContent) {
        bodyClassName.push("".concat(COMPONENT_NAME.value, "__body--fullscreen"));
      } else if (isFullScreen.value) {
        bodyClassName.push("".concat(COMPONENT_NAME.value, "__body--fullscreen--without-footer"));
      }
      return createVNode("div", {
        "class": bodyClassName,
        "onMousedown": onStopDown
      }, [body]);
    };
    var renderFooter = function renderFooter() {
      return footerContent && createVNode("div", {
        "class": footerClassName,
        "onMousedown": onStopDown
      }, [footerContent]);
    };
    return {
      renderHeader: renderHeader,
      renderBody: renderBody,
      renderFooter: renderFooter
    };
  },
  render: function render() {
    return createVNode(Fragment, null, [this.renderHeader(), this.renderBody(), !!this.footer && this.renderFooter()]);
  }
});

export { _DialogCard as default };
//# sourceMappingURL=dialog-card.mjs.map
