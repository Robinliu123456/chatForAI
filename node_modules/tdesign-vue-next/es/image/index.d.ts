import { TdImageProps } from './type';
import './style';
export type ImageProps = TdImageProps;
export * from './type';
export declare const Image: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: import("vue").PropType<TdImageProps["error"]>;
        };
        fallback: {
            type: StringConstructor;
            default: string;
        };
        fit: {
            type: import("vue").PropType<TdImageProps["fit"]>;
            default: TdImageProps["fit"];
            validator(val: TdImageProps["fit"]): boolean;
        };
        gallery: BooleanConstructor;
        lazy: BooleanConstructor;
        loading: {
            type: import("vue").PropType<TdImageProps["loading"]>;
        };
        overlayContent: {
            type: import("vue").PropType<TdImageProps["overlayContent"]>;
        };
        overlayTrigger: {
            type: import("vue").PropType<TdImageProps["overlayTrigger"]>;
            default: TdImageProps["overlayTrigger"];
            validator(val: TdImageProps["overlayTrigger"]): boolean;
        };
        placeholder: {
            type: import("vue").PropType<TdImageProps["placeholder"]>;
        };
        position: {
            type: StringConstructor;
            default: string;
        };
        referrerpolicy: {
            type: import("vue").PropType<TdImageProps["referrerpolicy"]>;
            default: TdImageProps["referrerpolicy"];
            validator(val: TdImageProps["referrerpolicy"]): boolean;
        };
        shape: {
            type: import("vue").PropType<TdImageProps["shape"]>;
            default: TdImageProps["shape"];
            validator(val: TdImageProps["shape"]): boolean;
        };
        src: {
            type: import("vue").PropType<TdImageProps["src"]>;
        };
        srcset: {
            type: import("vue").PropType<TdImageProps["srcset"]>;
        };
        onError: import("vue").PropType<TdImageProps["onError"]>;
        onLoad: import("vue").PropType<TdImageProps["onLoad"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: import("vue").PropType<TdImageProps["error"]>;
        };
        fallback: {
            type: StringConstructor;
            default: string;
        };
        fit: {
            type: import("vue").PropType<TdImageProps["fit"]>;
            default: TdImageProps["fit"];
            validator(val: TdImageProps["fit"]): boolean;
        };
        gallery: BooleanConstructor;
        lazy: BooleanConstructor;
        loading: {
            type: import("vue").PropType<TdImageProps["loading"]>;
        };
        overlayContent: {
            type: import("vue").PropType<TdImageProps["overlayContent"]>;
        };
        overlayTrigger: {
            type: import("vue").PropType<TdImageProps["overlayTrigger"]>;
            default: TdImageProps["overlayTrigger"];
            validator(val: TdImageProps["overlayTrigger"]): boolean;
        };
        placeholder: {
            type: import("vue").PropType<TdImageProps["placeholder"]>;
        };
        position: {
            type: StringConstructor;
            default: string;
        };
        referrerpolicy: {
            type: import("vue").PropType<TdImageProps["referrerpolicy"]>;
            default: TdImageProps["referrerpolicy"];
            validator(val: TdImageProps["referrerpolicy"]): boolean;
        };
        shape: {
            type: import("vue").PropType<TdImageProps["shape"]>;
            default: TdImageProps["shape"];
            validator(val: TdImageProps["shape"]): boolean;
        };
        src: {
            type: import("vue").PropType<TdImageProps["src"]>;
        };
        srcset: {
            type: import("vue").PropType<TdImageProps["srcset"]>;
        };
        onError: import("vue").PropType<TdImageProps["onError"]>;
        onLoad: import("vue").PropType<TdImageProps["onLoad"]>;
    }>>, {
        lazy: boolean;
        position: string;
        shape: "circle" | "round" | "square";
        fit: "fill" | "none" | "contain" | "cover" | "scale-down";
        overlayTrigger: "hover" | "always";
        referrerpolicy: "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
        alt: string;
        fallback: string;
        gallery: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: import("vue").PropType<TdImageProps["error"]>;
        };
        fallback: {
            type: StringConstructor;
            default: string;
        };
        fit: {
            type: import("vue").PropType<TdImageProps["fit"]>;
            default: TdImageProps["fit"];
            validator(val: TdImageProps["fit"]): boolean;
        };
        gallery: BooleanConstructor;
        lazy: BooleanConstructor;
        loading: {
            type: import("vue").PropType<TdImageProps["loading"]>;
        };
        overlayContent: {
            type: import("vue").PropType<TdImageProps["overlayContent"]>;
        };
        overlayTrigger: {
            type: import("vue").PropType<TdImageProps["overlayTrigger"]>;
            default: TdImageProps["overlayTrigger"];
            validator(val: TdImageProps["overlayTrigger"]): boolean;
        };
        placeholder: {
            type: import("vue").PropType<TdImageProps["placeholder"]>;
        };
        position: {
            type: StringConstructor;
            default: string;
        };
        referrerpolicy: {
            type: import("vue").PropType<TdImageProps["referrerpolicy"]>;
            default: TdImageProps["referrerpolicy"];
            validator(val: TdImageProps["referrerpolicy"]): boolean;
        };
        shape: {
            type: import("vue").PropType<TdImageProps["shape"]>;
            default: TdImageProps["shape"];
            validator(val: TdImageProps["shape"]): boolean;
        };
        src: {
            type: import("vue").PropType<TdImageProps["src"]>;
        };
        srcset: {
            type: import("vue").PropType<TdImageProps["srcset"]>;
        };
        onError: import("vue").PropType<TdImageProps["onError"]>;
        onLoad: import("vue").PropType<TdImageProps["onLoad"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        lazy: boolean;
        position: string;
        shape: "circle" | "round" | "square";
        fit: "fill" | "none" | "contain" | "cover" | "scale-down";
        overlayTrigger: "hover" | "always";
        referrerpolicy: "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
        alt: string;
        fallback: string;
        gallery: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: import("vue").PropType<TdImageProps["error"]>;
    };
    fallback: {
        type: StringConstructor;
        default: string;
    };
    fit: {
        type: import("vue").PropType<TdImageProps["fit"]>;
        default: TdImageProps["fit"];
        validator(val: TdImageProps["fit"]): boolean;
    };
    gallery: BooleanConstructor;
    lazy: BooleanConstructor;
    loading: {
        type: import("vue").PropType<TdImageProps["loading"]>;
    };
    overlayContent: {
        type: import("vue").PropType<TdImageProps["overlayContent"]>;
    };
    overlayTrigger: {
        type: import("vue").PropType<TdImageProps["overlayTrigger"]>;
        default: TdImageProps["overlayTrigger"];
        validator(val: TdImageProps["overlayTrigger"]): boolean;
    };
    placeholder: {
        type: import("vue").PropType<TdImageProps["placeholder"]>;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    referrerpolicy: {
        type: import("vue").PropType<TdImageProps["referrerpolicy"]>;
        default: TdImageProps["referrerpolicy"];
        validator(val: TdImageProps["referrerpolicy"]): boolean;
    };
    shape: {
        type: import("vue").PropType<TdImageProps["shape"]>;
        default: TdImageProps["shape"];
        validator(val: TdImageProps["shape"]): boolean;
    };
    src: {
        type: import("vue").PropType<TdImageProps["src"]>;
    };
    srcset: {
        type: import("vue").PropType<TdImageProps["srcset"]>;
    };
    onError: import("vue").PropType<TdImageProps["onError"]>;
    onLoad: import("vue").PropType<TdImageProps["onLoad"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    lazy: boolean;
    position: string;
    shape: "circle" | "round" | "square";
    fit: "fill" | "none" | "contain" | "cover" | "scale-down";
    overlayTrigger: "hover" | "always";
    referrerpolicy: "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
    alt: string;
    fallback: string;
    gallery: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Image;
