/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, computed, watch, createVNode, mergeProps } from 'vue';
import { d as dayjs } from '../_chunks/dep-f9079916.mjs';
import { isDate, isFunction } from 'lodash-es';
import { CalendarIcon } from 'tdesign-icons-vue-next';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useDisabled } from '../hooks/useDisabled.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import useSingle from './hooks/useSingle.mjs';
import { g as getDefaultFormat, f as formatDate, p as parseToDayjs, a as formatTime } from '../_chunks/dep-686a19de.mjs';
import { c as covertToDate, i as isSame, s as subtractMonth, a as addMonth, e as extractTimeObj } from '../_chunks/dep-bd25d49f.mjs';
import datePickerProps from './props.mjs';
import { SelectInput } from '../select-input/index.mjs';
import TSinglePanel from './panel/SinglePanel.mjs';
import { useReadonly } from '../hooks/useReadonly.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-7c8701fc.mjs';
import '../_chunks/dep-23a6b274.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-96b403e3.mjs';
import './hooks/useSingleValue.mjs';
import '../_chunks/dep-a3e567cf.mjs';
import '../_chunks/dep-6ac84404.mjs';
import '../hooks/useVModel.mjs';
import '../_chunks/dep-8117ebdb.mjs';
import '../_chunks/dep-30c62f61.mjs';
import '../_chunks/dep-45aa976c.mjs';
import '../_chunks/dep-536aec79.mjs';
import '../select-input/select-input.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../config-provider/context.mjs';
import '../_chunks/dep-2895d202.mjs';
import '../_chunks/dep-c3b9ffc0.mjs';
import '../hooks/useRipple.mjs';
import '../_chunks/dep-4ad0839f.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_chunks/dep-53d9b6da.mjs';
import '../utils/dom.mjs';
import '../popup/container.mjs';
import '../_chunks/dep-87669a0e.mjs';
import '../popup/props.mjs';
import '../hooks/useResizeObserver.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../config-provider/type.mjs';
import '../select-input/props.mjs';
import '../select-input/useSingle.mjs';
import '../_chunks/dep-e155a416.mjs';
import '../input/index.mjs';
import '../input/input.mjs';
import '../input/props.mjs';
import '../input/useInput.mjs';
import '../form/const.mjs';
import '../input/useLengthLimit.mjs';
import '../_chunks/dep-5211a143.mjs';
import '../input/useInputEventHandler.mjs';
import '../input/useInputWidth.mjs';
import '../input/input-group.mjs';
import '../input/input-group-props.mjs';
import '../input/type.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../_chunks/dep-433c4f57.mjs';
import '../loading/icon/gradient.mjs';
import '../loading/props.mjs';
import '../hooks/useTeleport.mjs';
import '../loading/type.mjs';
import '../select-input/useMultiple.mjs';
import '../tag-input/index.mjs';
import '../tag-input/tag-input.mjs';
import '../tag-input/props.mjs';
import '../tag-input/hooks/index.mjs';
import '../tag-input/hooks/useDragSorter.mjs';
import '../tag-input/hooks/useHover.mjs';
import '../tag-input/hooks/useTagScroll.mjs';
import '../tag-input/hooks/useTagList.mjs';
import '../tag/index.mjs';
import '../tag/tag.mjs';
import '../_chunks/dep-68c35191.mjs';
import '../tag/props.mjs';
import '../tag/check-tag.mjs';
import '../tag/check-tag-props.mjs';
import '../_chunks/dep-59dbd329.mjs';
import '../tag/check-tag-group.mjs';
import '../tag/check-tag-group-props.mjs';
import '../tag/type.mjs';
import '../tag-input/type.mjs';
import '../select-input/useOverlayInnerStyle.mjs';
import '../select-input/type.mjs';
import './panel/PanelContent.mjs';
import './base/Header.mjs';
import '../pagination/index.mjs';
import '../pagination/pagination.mjs';
import '../input-number/index.mjs';
import '../input-number/input-number.mjs';
import '../button/index.mjs';
import '../button/button.mjs';
import '../button/props.mjs';
import '../button/type.mjs';
import '../input-number/props.mjs';
import '../input-number/hooks/useInputNumber.mjs';
import '../_chunks/dep-41015f2f.mjs';
import '../_chunks/dep-0ace3794.mjs';
import '../input-number/type.mjs';
import '../select/index.mjs';
import '../select/select.mjs';
import '../_chunks/dep-1cd1bc71.mjs';
import '../common-components/fake-arrow.mjs';
import '../select/select-panel.mjs';
import '../select/option.mjs';
import '../select/option-props.mjs';
import '../checkbox/index.mjs';
import '../checkbox/checkbox.mjs';
import '../checkbox/props.mjs';
import '../checkbox/consts/index.mjs';
import '../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../_chunks/dep-651c8c97.mjs';
import '../checkbox/hooks/useKeyboardEvent.mjs';
import '../checkbox/group.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../checkbox/type.mjs';
import '../select/utils/index.mjs';
import '../select/consts/index.mjs';
import '../select/option-group.mjs';
import '../select/option-group-props.mjs';
import '../select/props.mjs';
import '../select/hooks/usePanelVirtualScroll.mjs';
import '../select/hooks/index.mjs';
import '../select/hooks/useKeyboardControl.mjs';
import '../select/hooks/useSelectOptions.mjs';
import '../select/type.mjs';
import '../input-adornment/index.mjs';
import '../input-adornment/input-adornment.mjs';
import '../input-adornment/props.mjs';
import '../input-adornment/type.mjs';
import '../pagination/props.mjs';
import '../pagination/hooks/index.mjs';
import '../pagination/hooks/useMoreAction.mjs';
import '../pagination/hooks/usePaginationClasses.mjs';
import '../pagination/pagination-mini.mjs';
import '../pagination/pagination-mini-props.mjs';
import '../pagination/type.mjs';
import './base/Table.mjs';
import './base/Cell.mjs';
import '../time-picker/panel/time-picker-panel.mjs';
import '../_chunks/dep-614a9ce4.mjs';
import '../time-picker/props.mjs';
import '../_chunks/dep-f5421cfa.mjs';
import './panel/ExtraContent.mjs';
import './base/Footer.mjs';
import './hooks/useTableData.mjs';
import './hooks/useDisableDate.mjs';

var _DatePicker = defineComponent({
  name: "TDatePicker",
  props: datePickerProps,
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("date-picker");
    var _useSingle = useSingle(props2),
      inputValue = _useSingle.inputValue,
      popupVisible = _useSingle.popupVisible,
      inputProps = _useSingle.inputProps,
      popupProps = _useSingle.popupProps,
      isHoverCell = _useSingle.isHoverCell,
      cacheValue = _useSingle.cacheValue,
      value = _useSingle.value,
      year = _useSingle.year,
      month = _useSingle.month,
      time = _useSingle.time,
      inputRef = _useSingle.inputRef,
      onChange = _useSingle.onChange;
    var disabled = useDisabled();
    var renderTNodeJSX = useTNodeJSX();
    var _useConfig = useConfig("datePicker"),
      globalConfig = _useConfig.globalConfig;
    var isReadOnly = useReadonly();
    var _useGlobalIcon = useGlobalIcon({
        CalendarIcon: CalendarIcon
      }),
      CalendarIcon$1 = _useGlobalIcon.CalendarIcon;
    var formatRef = computed(function () {
      return getDefaultFormat({
        mode: props2.mode,
        format: props2.format,
        valueType: props2.valueType,
        enableTimePicker: props2.multiple ? false : props2.enableTimePicker
      });
    });
    var valueDisplayParams = computed(function () {
      return {
        value: value.value,
        displayValue: inputValue.value
      };
    });
    watch(popupVisible, function (visible) {
      var _formatRef$value;
      if (props2.multiple) return;
      if (!props2.needConfirm && props2.enableTimePicker && !visible) {
        var nextValue = formatDate(inputValue.value, {
          format: formatRef.value.format
        });
        if (nextValue) {
          onChange === null || onChange === void 0 || onChange(formatDate(inputValue.value, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: parseToDayjs(inputValue.value, formatRef.value.format),
            trigger: "confirm"
          });
        } else {
          inputValue.value = formatDate(value.value, {
            format: formatRef.value.format
          });
        }
      }
      var dateValue = value.value && !isDate(value.value) && !["week", "quarter"].includes(props2.mode) ? covertToDate(value.value, (_formatRef$value = formatRef.value) === null || _formatRef$value === void 0 ? void 0 : _formatRef$value.valueType) : value.value;
      cacheValue.value = formatDate(dateValue, {
        format: formatRef.value.valueType,
        targetFormat: formatRef.value.format
      });
      inputValue.value = formatDate(dateValue, {
        format: formatRef.value.valueType,
        targetFormat: formatRef.value.format
      });
      if (visible) {
        year.value = parseToDayjs(value.value, formatRef.value.valueType).year();
        month.value = parseToDayjs(value.value, formatRef.value.format).month();
        time.value = formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props2.defaultTime);
      } else {
        isHoverCell.value = false;
      }
    });
    function onCellMouseEnter(date) {
      if (props2.multiple) return;
      isHoverCell.value = true;
      inputValue.value = formatDate(date, {
        format: formatRef.value.format
      });
    }
    function onCellMouseLeave() {
      if (props2.multiple) return;
      isHoverCell.value = false;
      inputValue.value = formatDate(cacheValue.value, {
        format: formatRef.value.format
      });
    }
    function onCellClick(date) {
      var _props2$onPick;
      isHoverCell.value = false;
      if (props2.mode === "date") {
        year.value = date.getFullYear();
        month.value = date.getMonth();
      }
      if (props2.enableTimePicker) {
        cacheValue.value = formatDate(date, {
          format: formatRef.value.format
        });
      } else {
        if (props2.multiple) {
          var newDate = processDate(date);
          onChange(newDate, {
            dayjsValue: parseToDayjs(date, formatRef.value.format),
            trigger: "pick"
          });
          return;
        }
        onChange === null || onChange === void 0 || onChange(formatDate(date, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: parseToDayjs(date, formatRef.value.format),
          trigger: "pick"
        });
        popupVisible.value = false;
      }
      (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 || _props2$onPick.call(props2, date);
    }
    function processDate(date) {
      var isSameDate;
      var currentValue = value.value || [];
      var dayjsLocale = globalConfig.value.dayjsLocale;
      var currentDate;
      if (props2.mode !== "week") isSameDate = currentValue.some(function (val) {
        return isSame(parseToDayjs(val, formatRef.value.format).toDate(), date, props2.mode, dayjsLocale);
      });else {
        isSameDate = currentValue.some(function (val) {
          return val === dayjs(date).locale(dayjsLocale).format(formatRef.value.format);
        });
      }
      if (!isSameDate) {
        currentDate = currentValue.concat(formatDate(date, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }));
      } else {
        currentDate = currentValue.filter(function (val) {
          return formatDate(val, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }) !== formatDate(date, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          });
        });
      }
      return currentDate;
    }
    function onTagRemoveClick(ctx) {
      var removeDate = dayjs(ctx.item).toDate();
      var newDate = processDate(removeDate);
      onChange === null || onChange === void 0 || onChange(newDate, {
        dayjsValue: parseToDayjs(removeDate, formatRef.value.format),
        trigger: "tag-remove"
      });
    }
    function onTagClearClick(_ref) {
      var e = _ref.e;
      e.stopPropagation();
      popupVisible.value = false;
      onChange === null || onChange === void 0 || onChange([], {
        dayjsValue: dayjs(),
        trigger: "clear"
      });
    }
    function onJumperClick(_ref2) {
      var trigger = _ref2.trigger;
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[props2.mode] || 0;
      var current = new Date(year.value, month.value);
      var next = null;
      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }
      var nextYear = next.getFullYear();
      var nextMonth = next.getMonth();
      year.value = nextYear;
      month.value = nextMonth;
    }
    function onTimePickerChange(val) {
      var _props2$onPick2;
      time.value = val;
      var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var currentDate = !dayjs(inputValue.value, formatRef.value.format).isValid() ? dayjs() : dayjs(inputValue.value, formatRef.value.format);
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      inputValue.value = formatDate(nextDate, {
        format: formatRef.value.format
      });
      cacheValue.value = formatDate(nextDate, {
        format: formatRef.value.format
      });
      (_props2$onPick2 = props2.onPick) === null || _props2$onPick2 === void 0 || _props2$onPick2.call(props2, nextDate);
    }
    function onConfirmClick(_ref3) {
      var e = _ref3.e;
      var nextValue = formatDate(inputValue.value, {
        format: formatRef.value.format
      });
      if (nextValue) {
        var _props2$onConfirm;
        props2 === null || props2 === void 0 || (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, {
          date: dayjs(nextValue).toDate(),
          e: e
        });
        onChange === null || onChange === void 0 || onChange(formatDate(inputValue.value, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: parseToDayjs(inputValue.value, formatRef.value.format),
          trigger: "confirm"
        });
      } else {
        inputValue.value = formatDate(value.value, {
          format: formatRef.value.format
        });
      }
      popupVisible.value = false;
    }
    function onPresetClick(presetValue) {
      var presetVal = isFunction(presetValue) ? presetValue() : presetValue;
      onChange === null || onChange === void 0 || onChange(formatDate(presetVal, {
        format: formatRef.value.format,
        targetFormat: formatRef.value.valueType
      }), {
        dayjsValue: parseToDayjs(presetVal, formatRef.value.format),
        trigger: "preset"
      });
      inputValue.value = formatDate(presetVal, {
        format: formatRef.value.format
      });
      popupVisible.value = false;
    }
    function onYearChange(nextYear) {
      year.value = nextYear;
    }
    function onMonthChange(nextMonth) {
      month.value = nextMonth;
    }
    var panelProps = computed(function () {
      return {
        value: cacheValue.value,
        year: year.value,
        month: month.value,
        format: formatRef.value.format,
        mode: props2.mode,
        presets: props2.presets,
        multiple: props2.multiple,
        time: props2.multiple ? "" : time.value,
        disableDate: props2.disableDate,
        firstDayOfWeek: props2.firstDayOfWeek,
        timePickerProps: props2.timePickerProps,
        enableTimePicker: props2.multiple ? false : props2.enableTimePicker,
        presetsPlacement: props2.presetsPlacement,
        popupVisible: popupVisible.value,
        needConfirm: props2.needConfirm,
        onCellClick: onCellClick,
        onCellMouseEnter: onCellMouseEnter,
        onCellMouseLeave: onCellMouseLeave,
        onJumperClick: onJumperClick,
        onConfirmClick: onConfirmClick,
        onPresetClick: onPresetClick,
        onYearChange: onYearChange,
        onMonthChange: onMonthChange,
        onTimePickerChange: onTimePickerChange,
        onPanelClick: function onPanelClick() {
          var _inputRef$value, _inputRef$value$focus;
          return (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 || (_inputRef$value$focus = _inputRef$value.focus) === null || _inputRef$value$focus === void 0 ? void 0 : _inputRef$value$focus.call(_inputRef$value);
        }
      };
    });
    return function () {
      return createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [createVNode(SelectInput, mergeProps({
        "borderless": props2.borderless,
        "disabled": disabled.value,
        "value": inputValue.value,
        "label": props2.label,
        "status": props2.status,
        "tips": props2.tips,
        "clearable": props2.clearable,
        "multiple": props2.multiple,
        "popupProps": popupProps.value,
        "inputProps": inputProps.value,
        "placeholder": props2.placeholder || globalConfig.value.placeholder[props2.mode],
        "popupVisible": !isReadOnly.value && popupVisible.value,
        "valueDisplay": function valueDisplay() {
          return renderTNodeJSX("valueDisplay", {
            params: valueDisplayParams.value
          });
        },
        "needConfirm": props2.needConfirm
      }, props2.selectInputProps, {
        "panel": function panel() {
          return createVNode(TSinglePanel, panelProps.value, null);
        },
        "tagInputProps": {
          onRemove: onTagRemoveClick
        },
        "onClear": onTagClearClick,
        "prefixIcon": renderTNodeJSX("prefixIcon"),
        "suffixIcon": function suffixIcon() {
          return renderTNodeJSX("suffixIcon") || createVNode(CalendarIcon$1, null, null);
        }
      }), null)]);
    };
  }
});

export { _DatePicker as default };
//# sourceMappingURL=DatePicker.mjs.map
