/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-96b403e3.mjs';
import { defineComponent, ref, computed, createVNode } from 'vue';
import { DeleteIcon, AddIcon } from 'tdesign-icons-vue-next';
import { Color } from '../utils/index.mjs';
import { useBaseClassName } from '../hooks/index.mjs';
import { useCommonClassName } from '../../hooks/useConfig.mjs';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import baseProps from './base-props.mjs';
import '../../_chunks/dep-7c8701fc.mjs';
import '../../_chunks/dep-a3e567cf.mjs';
import '../../_chunks/dep-6ac84404.mjs';
import '../../_chunks/dep-cf893fd5.mjs';
import '../../_chunks/dep-68c35191.mjs';
import 'lodash-es';
import '../../config-provider/useConfig.mjs';
import '../../config-provider/context.mjs';
import '../../_chunks/dep-2895d202.mjs';
import '../../_chunks/dep-23a6b274.mjs';
import '../../_chunks/dep-f9079916.mjs';
import '../../_chunks/dep-c3b9ffc0.mjs';
import '../../config-provider/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var SwatchesPanel = defineComponent({
  name: "SwatchesPanel",
  props: _objectSpread(_objectSpread({}, baseProps), {}, {
    colors: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    title: {
      type: String,
      "default": "\u7CFB\u7EDF\u8272\u5F69"
    },
    editable: {
      type: Boolean,
      "default": false
    },
    onSetColor: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    },
    handleAddColor: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  }),
  setup: function setup(props) {
    var baseClassName = useBaseClassName();
    var _useGlobalIcon = useGlobalIcon({
        DeleteIcon: DeleteIcon,
        AddIcon: AddIcon
      }),
      DeleteIcon$1 = _useGlobalIcon.DeleteIcon,
      AddIcon$1 = _useGlobalIcon.AddIcon;
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS;
    var statusClassNames = STATUS.value;
    var visiblePopConfirm = ref(false);
    var setVisiblePopConfirm = function setVisiblePopConfirm(visible) {
      visiblePopConfirm.value = visible;
    };
    var handleClick = function handleClick(color) {
      return props.onSetColor(color);
    };
    var isEqualCurrentColor = function isEqualCurrentColor(color) {
      return Color.compare(color, props.color.css);
    };
    var selectedColorIndex = computed(function () {
      return props.colors.findIndex(function (color) {
        return isEqualCurrentColor(color);
      });
    });
    var handleRemoveColor = function handleRemoveColor() {
      var colors = props.colors;
      var selectedIndex = selectedColorIndex.value;
      if (selectedIndex === -1) return;
      colors.splice(selectedIndex, 1);
      props.onChange(colors);
      setVisiblePopConfirm(false);
    };
    return {
      baseClassName: baseClassName,
      DeleteIcon: DeleteIcon$1,
      AddIcon: AddIcon$1,
      statusClassNames: statusClassNames,
      selectedColorIndex: selectedColorIndex,
      visiblePopConfirm: visiblePopConfirm,
      setVisiblePopConfirm: setVisiblePopConfirm,
      handleClick: handleClick,
      isEqualCurrentColor: isEqualCurrentColor,
      handleRemoveColor: handleRemoveColor
    };
  },
  render: function render() {
    var _this = this;
    var baseClassName = this.baseClassName,
      DeleteIcon = this.DeleteIcon,
      AddIcon = this.AddIcon,
      statusClassNames = this.statusClassNames,
      title = this.title,
      editable = this.editable;
    var swatchesClass = "".concat(baseClassName, "__swatches");
    var renderActions = function renderActions() {
      if (!editable) {
        return null;
      }
      return createVNode("div", {
        "class": "".concat(swatchesClass, "--actions")
      }, [createVNode("span", {
        "role": "button",
        "class": "".concat(baseClassName, "__icon"),
        "onClick": function onClick() {
          return _this.handleAddColor();
        }
      }, [createVNode(AddIcon, null, null)]), _this.colors.length > 0 ? createVNode("span", {
        "role": "button",
        "class": "".concat(baseClassName, "__icon"),
        "onClick": function onClick() {
          return _this.handleRemoveColor();
        }
      }, [createVNode(DeleteIcon, null, null)]) : null]);
    };
    return createVNode("div", {
      "class": swatchesClass
    }, [createVNode("h3", {
      "class": "".concat(swatchesClass, "--title")
    }, [createVNode("span", null, [title]), renderActions()]), createVNode("ul", {
      "class": ["".concat(swatchesClass, "--items"), "narrow-scrollbar"]
    }, [this.colors.map(function (color) {
      return createVNode("li", {
        "class": ["".concat(swatchesClass, "--item"), _this.isEqualCurrentColor(color) && editable ? statusClassNames.active : ""],
        "title": color,
        "key": color,
        "onClick": function onClick() {
          if (_this.disabled) {
            return;
          }
          _this.handleClick(color);
        }
      }, [createVNode("div", {
        "class": ["".concat(swatchesClass, "--color"), "".concat(baseClassName, "--bg-alpha")]
      }, [createVNode("span", {
        "class": "".concat(swatchesClass, "--inner"),
        "style": {
          background: color
        }
      }, null)])]);
    })])]);
  }
});

export { SwatchesPanel as default };
//# sourceMappingURL=swatches.mjs.map
