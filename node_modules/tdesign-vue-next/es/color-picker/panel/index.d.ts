import { Color, GradientColorPoint } from '../utils';
import { TdColorPickerProps } from '../type';
import { TdColorModes } from '../types';
declare const _default: import("vue").DefineComponent<{
    togglePopup: {
        type: FunctionConstructor;
    };
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    closeBtn: {
        type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
        default: TdColorPickerProps["closeBtn"];
    };
    colorModes: {
        type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
        default: () => TdColorPickerProps["colorModes"];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    enableMultipleGradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    format: {
        type: import("vue").PropType<TdColorPickerProps["format"]>;
        default: TdColorPickerProps["format"];
        validator(val: TdColorPickerProps["format"]): boolean;
    };
    inputProps: {
        type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
    };
    recentColors: {
        type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
        default: TdColorPickerProps["recentColors"];
    };
    defaultRecentColors: {
        type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
        default: () => TdColorPickerProps["defaultRecentColors"];
    };
    selectInputProps: {
        type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
    };
    showPrimaryColorPreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<TdColorPickerProps["size"]>;
        default: TdColorPickerProps["size"];
        validator(val: TdColorPickerProps["size"]): boolean;
    };
    swatchColors: {
        type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
    onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
    onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
}, {
    baseClassName: import("vue").ComputedRef<any>;
    statusClassNames: {
        loading: string;
        loadMore: string;
        disabled: string;
        focused: string;
        success: string;
        error: string;
        warning: string;
        selected: string;
        active: string;
        checked: string;
        current: string;
        hidden: string;
        visible: string;
        expanded: string;
        indeterminate: string;
    };
    t: <T>(pattern: T, ...args: any[]) => any;
    globalConfig: import("vue").ComputedRef<{} & (import("../..").ColorPickerConfig | ({
        readonly swatchColorTitle: "系统预设颜色";
        readonly recentColorTitle: "最近使用颜色";
        readonly clearConfirmText: "确定清空最近使用的颜色吗？";
        readonly singleColor: "单色";
        readonly gradientColor: "渐变";
    } & import("../..").ColorPickerConfig))>;
    color: import("vue").Ref<{
        states: {
            s: number;
            v: number;
            h: number;
            a: number;
        };
        originColor: string;
        isGradient: boolean;
        gradientStates: {
            colors: {
                id?: string;
                color?: string;
                left?: number;
            }[];
            degree: number;
            selectedId: string;
            css?: string;
        };
        update: (input: string) => void;
        saturation: number;
        value: number;
        hue: number;
        alpha: number;
        readonly rgb: string;
        readonly rgba: string;
        readonly hsv: string;
        readonly hsva: string;
        readonly hsl: string;
        readonly hsla: string;
        readonly hex: string;
        readonly hex8: string;
        readonly cmyk: string;
        readonly css: string;
        readonly linearGradient: string;
        gradientColors: GradientColorPoint[];
        gradientSelectedId: string;
        gradientDegree: number;
        readonly gradientSelectedPoint: GradientColorPoint;
        getFormatsColorMap: () => {
            HEX: string;
            CMYK: string;
            RGB: string;
            RGBA: string;
            HSL: string;
            HSLA: string;
            HSV: string;
            HSVA: string;
            CSS: string;
            HEX8: string;
        };
        updateCurrentGradientColor: () => false | Color;
        updateStates: (input: string) => void;
        getRgba: () => {
            r: number;
            g: number;
            b: number;
            a: number;
        };
        getCmyk: () => {
            c: number;
            m: number;
            y: number;
            k: number;
        };
        getHsva: () => import("tinycolor2").ColorFormats.HSVA;
        getHsla: () => import("tinycolor2").ColorFormats.HSLA;
        equals: (color: string) => boolean;
    }>;
    mode: import("vue").Ref<TdColorModes>;
    formatModel: import("vue").Ref<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
    recentlyUsedColors: import("vue").Ref<boolean | string[]>;
    isGradient: import("vue").ComputedRef<boolean>;
    addRecentlyUsedColor: () => void;
    handleModeChange: (value: TdColorModes) => void;
    handleSatAndValueChange: ({ saturation, value }: {
        saturation: number;
        value: number;
    }) => void;
    handleHueChange: (hue: number) => void;
    handleAlphaChange: (alpha: number) => void;
    handleGradientChange: ({ key, payload, }: {
        key: "degree" | "selectedId" | "colors";
        payload: number | string | GradientColorPoint[];
    }) => void;
    handleSetColor: (type: "system" | "used", value: string) => void;
    handleFormatModeChange: (format: TdColorPickerProps["format"]) => "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
    handleInputChange: (input: string, alpha?: number) => void;
    handleRecentlyUsedColorsChange: (colors: string[]) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    togglePopup: {
        type: FunctionConstructor;
    };
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    closeBtn: {
        type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
        default: TdColorPickerProps["closeBtn"];
    };
    colorModes: {
        type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
        default: () => TdColorPickerProps["colorModes"];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    enableMultipleGradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    format: {
        type: import("vue").PropType<TdColorPickerProps["format"]>;
        default: TdColorPickerProps["format"];
        validator(val: TdColorPickerProps["format"]): boolean;
    };
    inputProps: {
        type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
    };
    recentColors: {
        type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
        default: TdColorPickerProps["recentColors"];
    };
    defaultRecentColors: {
        type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
        default: () => TdColorPickerProps["defaultRecentColors"];
    };
    selectInputProps: {
        type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
    };
    showPrimaryColorPreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<TdColorPickerProps["size"]>;
        default: TdColorPickerProps["size"];
        validator(val: TdColorPickerProps["size"]): boolean;
    };
    swatchColors: {
        type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
    onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
    onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
}>>, {
    value: string;
    disabled: boolean;
    modelValue: string;
    size: import("../..").SizeEnum;
    defaultValue: string;
    multiple: boolean;
    format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
    borderless: boolean;
    clearable: boolean;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("../..").TNodeReturnValue);
    colorModes: ("monochrome" | "linear-gradient")[];
    recentColors: boolean | string[];
    defaultRecentColors: boolean | string[];
    enableAlpha: boolean;
    enableMultipleGradient: boolean;
    showPrimaryColorPreview: boolean;
}, {}>;
export default _default;
