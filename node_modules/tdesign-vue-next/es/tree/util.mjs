/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-96b403e3.mjs';
import { camelCase } from 'lodash-es';
import { isVueNext } from './adapt.mjs';
import '../_chunks/dep-7c8701fc.mjs';
import 'vue';
import '../utils/withInstall.mjs';
import '../hooks/useVModel.mjs';
import '../hooks/useDefaultValue.mjs';
import 'tdesign-icons-vue-next';
import '../checkbox/index.mjs';
import '../checkbox/checkbox.mjs';
import '../_chunks/dep-a3e567cf.mjs';
import '../_chunks/dep-6ac84404.mjs';
import '../checkbox/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useConfig.mjs';
import '../config-provider/useConfig.mjs';
import '../config-provider/context.mjs';
import '../_chunks/dep-2895d202.mjs';
import '../_chunks/dep-23a6b274.mjs';
import '../_chunks/dep-f9079916.mjs';
import '../_chunks/dep-c3b9ffc0.mjs';
import '../config-provider/type.mjs';
import '../_chunks/dep-4ad0839f.mjs';
import '../hooks/tnode.mjs';
import '../utils/render-tnode.mjs';
import '../checkbox/consts/index.mjs';
import '../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../_chunks/dep-651c8c97.mjs';
import '../checkbox/hooks/useKeyboardEvent.mjs';
import '../_chunks/dep-59dbd329.mjs';
import '../hooks/useDisabled.mjs';
import '../hooks/useReadonly.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-87669a0e.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../hooks/slot.mjs';
import './style/css.mjs';
import '../checkbox/type.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../_chunks/dep-433c4f57.mjs';
import '../loading/icon/gradient.mjs';
import '../_chunks/dep-5211a143.mjs';
import '../_chunks/dep-e155a416.mjs';
import '../utils/dom.mjs';
import '../loading/props.mjs';
import '../hooks/useTeleport.mjs';
import '../loading/type.mjs';
import '../hooks/useGlobalIcon.mjs';
import '../hooks/useLazyLoad.mjs';
import '../hooks/useVirtualScrollNew.mjs';
import '../hooks/useResizeObserver.mjs';
import '../_chunks/dep-3e2c3218.mjs';
import '../_chunks/dep-1cd1bc71.mjs';
import '../_chunks/dep-cf893fd5.mjs';
import '../_chunks/dep-30c62f61.mjs';
import '../_chunks/dep-8117ebdb.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function emitEvent(props, context, evtName) {
  var apiName = camelCase("on-".concat(evtName));
  evtName.replace(/^on/, "").toLowerCase();
  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }
  if (typeof props[apiName] === "function") {
    props[apiName].apply(props, args);
  }
  if (!isVueNext) {
    context.emit.apply(context, [evtName].concat(args));
  }
}
function getParentsToRoot(element, root) {
  var list = [];
  var el = element;
  while (el && el.parentNode) {
    list.push(el);
    if (el === root) {
      break;
    }
    el = el.parentNode;
  }
  return list;
}
function getParentMarks(name, element, root) {
  var list = getParentsToRoot(element, root);
  return list.map(function (el) {
    var mark = {
      name: name,
      value: (el === null || el === void 0 ? void 0 : el.getAttribute(name)) || "",
      el: el
    };
    return mark;
  }).filter(function (mark) {
    return mark.value;
  });
}
function getMark(name, element, root) {
  var list = getParentMarks(name, element, root);
  var info = list.pop() || null;
  return info;
}
function pathMatchClass(name, element, root) {
  var list = getParentsToRoot(element, root);
  var rs = list.some(function (el) {
    return el.classList.contains(name);
  });
  return rs;
}
function getTNode(prop, options) {
  var tnode = null;
  var item = null;
  var conf = _objectSpread({}, options);
  if (typeof prop === "function") {
    var _conf$node;
    item = prop(conf.createElement, (_conf$node = conf.node) === null || _conf$node === void 0 ? void 0 : _conf$node.getModel());
  } else if (typeof prop === "string") {
    item = prop;
  }
  if (typeof item === "string") {
    tnode = item;
  } else if (item) {
    tnode = item;
  }
  return tnode;
}
function getLineModel(nodes, node, index) {
  var lineModel = {
    top: false,
    right: false,
    bottom: false,
    left: false
  };
  var nodeChildren = [];
  if (Array.isArray(node.children)) {
    nodeChildren = node.children;
  }
  var childNode = nodes[index - 1] || null;
  var nodeItemIndex = childNode ? childNode.getIndex() : 0;
  if (index === 0) {
    lineModel.left = !!node.parent;
    lineModel.bottom = node.children && node.expanded;
    lineModel.right = node.parent && !node.children;
  } else if (index === 1) {
    lineModel.top = true;
    lineModel.right = true;
    lineModel.bottom = nodeItemIndex < nodeChildren.length - 1;
  } else if (nodeItemIndex < nodeChildren.length - 1) {
    lineModel.top = true;
    lineModel.bottom = true;
  }
  return lineModel;
}
function isTreeNodeValue(item) {
  return typeof item === "string" || typeof item === "number";
}
function getNode(store, item) {
  var node = null;
  var val = null;
  if (typeof item === "string" || typeof item === "number") {
    val = item;
  } else if (item && isTreeNodeValue(item.value)) {
    val = item.value;
  }
  node = store.getNode(val);
  return node;
}

export { emitEvent, getLineModel, getMark, getNode, getParentMarks, getParentsToRoot, getTNode, isTreeNodeValue, pathMatchClass };
//# sourceMappingURL=util.mjs.map
