/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var isObject = require('../_chunks/dep-ae77d744.js');
var isString = require('../_chunks/dep-acdd3481.js');
var camelCase = require('../_chunks/dep-9a234926.js');
var kebabCase = require('../_chunks/dep-172ba234.js');
var isFunction = require('../_chunks/dep-f3362596.js');
var isEmpty = require('../_chunks/dep-2930dcc3.js');
var isArray = require('../_chunks/dep-fd23ce18.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-8af7b432.js');
require('../_chunks/dep-750b6c90.js');
require('../_chunks/dep-179c4586.js');
require('../_chunks/dep-65ed94ad.js');
require('../_chunks/dep-93deee44.js');
require('../_chunks/dep-b74aef17.js');
require('../_chunks/dep-53d908b3.js');
require('../_chunks/dep-481d05e9.js');
require('../_chunks/dep-ec56dcd9.js');
require('../_chunks/dep-b402ceae.js');
require('../_chunks/dep-901ff2b1.js');
require('../_chunks/dep-b8cfc98c.js');
require('../_chunks/dep-0d790559.js');

function getDefaultNode(options) {
  var defaultNode;
  if (isObject.isObject(options) && "defaultNode" in options) {
    defaultNode = options.defaultNode;
  } else if (Vue.isVNode(options) || isString.isString(options)) {
    defaultNode = options;
  }
  return defaultNode;
}
function getChildren(content) {
  var childList = [];
  var _innerGetChildren = function innerGetChildren(content2) {
    if (!isArray.isArray(content2)) return;
    content2.forEach(function (item) {
      if (item.children && isArray.isArray(item.children)) {
        if (item.type !== Vue.Fragment) return;
        _innerGetChildren(item.children);
      } else {
        childList.push(item);
      }
    });
    return childList;
  };
  return _innerGetChildren(content);
}
function getParams(options) {
  return isObject.isObject(options) && "params" in options ? options.params : {};
}
function getSlotFirst(options) {
  return isObject.isObject(options) && "slotFirst" in options ? options.slotFirst : {};
}
function handleSlots(instance, params, name) {
  var _instance$$slots$came, _instance$$slots, _instance$$slots$keba, _instance$$slots2;
  var node = (_instance$$slots$came = (_instance$$slots = instance.$slots)[camelCase.camelCase(name)]) === null || _instance$$slots$came === void 0 ? void 0 : _instance$$slots$came.call(_instance$$slots, params);
  if (node) return node;
  node = (_instance$$slots$keba = (_instance$$slots2 = instance.$slots)[kebabCase.kebabCase(name)]) === null || _instance$$slots$keba === void 0 ? void 0 : _instance$$slots$keba.call(_instance$$slots2, params);
  if (node) return node;
  return null;
}
var renderTNodeJSX = function renderTNodeJSX(instance, name, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var propsNode;
  if (name in instance) {
    propsNode = instance[name];
  }
  if (propsNode === false || propsNode === null) return;
  if (propsNode === true && defaultNode) {
    return handleSlots(instance, params, name) || defaultNode;
  }
  if (isFunction.isFunction(propsNode)) return propsNode(Vue.h, params);
  var isPropsEmpty = [void 0, params, ""].includes(propsNode);
  if (isPropsEmpty && (instance.$slots[camelCase.camelCase(name)] || instance.$slots[kebabCase.kebabCase(name)])) {
    return handleSlots(instance, params, name);
  }
  return propsNode;
};
var renderTNodeJSXDefault = function renderTNodeJSXDefault(vm, name, options) {
  var defaultNode = getDefaultNode(options);
  return renderTNodeJSX(vm, name, options) || defaultNode;
};
var renderContent = function renderContent(vm, name1, name2, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var toParams = params ? {
    params: params
  } : void 0;
  var node1 = renderTNodeJSX(vm, name1, toParams);
  var node2 = renderTNodeJSX(vm, name2, toParams);
  var res = isEmpty.isEmpty(node1) ? node2 : node1;
  return isEmpty.isEmpty(res) ? defaultNode : res;
};

exports.getChildren = getChildren;
exports.getDefaultNode = getDefaultNode;
exports.getParams = getParams;
exports.getSlotFirst = getSlotFirst;
exports.handleSlots = handleSlots;
exports.renderContent = renderContent;
exports.renderTNodeJSX = renderTNodeJSX;
exports.renderTNodeJSXDefault = renderTNodeJSXDefault;
//# sourceMappingURL=render-tnode.js.map
