/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var Vue = require('vue');
var tag_index = require('../../tag/index.js');
var hooks_useVModel = require('../../hooks/useVModel.js');
var hooks_useConfig = require('../../hooks/useConfig.js');
var hooks_tnode = require('../../hooks/tnode.js');
var hooks_useDisabled = require('../../hooks/useDisabled.js');
var hooks_useReadonly = require('../../hooks/useReadonly.js');
require('../../tag/tag.js');
require('tdesign-icons-vue-next');
require('tinycolor2');
require('../../tag/props.js');
require('../../hooks/useGlobalIcon.js');
require('../../config-provider/useConfig.js');
require('../../_chunks/dep-bc99882c.js');
require('../../_chunks/dep-dbac77fd.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-c0c71352.js');
require('dayjs');
require('../../_chunks/dep-9e37eebf.js');
require('../../_chunks/dep-a01b02fa.js');
require('../../_chunks/dep-7b70fa2b.js');
require('../../_chunks/dep-901ff2b1.js');
require('../../_chunks/dep-f3362596.js');
require('../../_chunks/dep-8af7b432.js');
require('../../_chunks/dep-ae77d744.js');
require('../../_chunks/dep-8db04cd4.js');
require('../../_chunks/dep-0d790559.js');
require('../../_chunks/dep-750b6c90.js');
require('../../_chunks/dep-fd23ce18.js');
require('../../_chunks/dep-ec56dcd9.js');
require('../../_chunks/dep-b402ceae.js');
require('../../_chunks/dep-0d817d77.js');
require('../../_chunks/dep-bbc5435a.js');
require('../../_chunks/dep-10ffbad0.js');
require('../../_chunks/dep-89db45fd.js');
require('../../_chunks/dep-b75e3209.js');
require('../../_chunks/dep-55ae3cb5.js');
require('../../_chunks/dep-481d05e9.js');
require('../../_chunks/dep-b8cfc98c.js');
require('../../_chunks/dep-dc345794.js');
require('../../_chunks/dep-acdd3481.js');
require('../../utils/render-tnode.js');
require('../../_chunks/dep-9a234926.js');
require('../../_chunks/dep-179c4586.js');
require('../../_chunks/dep-65ed94ad.js');
require('../../_chunks/dep-93deee44.js');
require('../../_chunks/dep-b74aef17.js');
require('../../_chunks/dep-53d908b3.js');
require('../../_chunks/dep-172ba234.js');
require('../../_chunks/dep-2930dcc3.js');
require('../../tag/check-tag.js');
require('../../tag/check-tag-props.js');
require('../../_chunks/dep-d2dcffb5.js');
require('../../tag/check-tag-group.js');
require('../../tag/check-tag-group-props.js');
require('../../utils/withInstall.js');
require('../../_chunks/dep-5c1c1647.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useTagList(props) {
  var renderTNode = hooks_tnode.useTNodeJSX();
  var classPrefix = hooks_useConfig.usePrefixClass();
  var _toRefs = Vue.toRefs(props),
    value = _toRefs.value,
    modelValue = _toRefs.modelValue,
    onRemove = _toRefs.onRemove,
    max = _toRefs.max,
    minCollapsedNum = _toRefs.minCollapsedNum,
    size = _toRefs.size,
    tagProps = _toRefs.tagProps,
    getDragProps = _toRefs.getDragProps;
  var _useVModel = hooks_useVModel["default"](value, modelValue, props.defaultValue || [], props.onChange),
    _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
    tagValue = _useVModel2[0],
    setTagValue = _useVModel2[1];
  var oldInputValue = Vue.ref();
  var isDisabled = hooks_useDisabled.useDisabled();
  var isReadonly = hooks_useReadonly.useReadonly();
  var _onClose = function onClose(p) {
    var _onRemove$value;
    var arr = _toConsumableArray__default["default"](tagValue.value);
    var _arr$splice = arr.splice(p.index, 1),
      _arr$splice2 = _slicedToArray__default["default"](_arr$splice, 1),
      item = _arr$splice2[0];
    setTagValue(arr, _objectSpread(_objectSpread({
      trigger: "tag-remove"
    }, p), {}, {
      item: item
    }));
    (_onRemove$value = onRemove.value) === null || _onRemove$value === void 0 || _onRemove$value.call(onRemove, _objectSpread(_objectSpread({}, p), {}, {
      item: item,
      trigger: "tag-remove",
      value: arr
    }));
  };
  var clearAll = function clearAll(context) {
    setTagValue([], {
      trigger: "clear",
      e: context.e
    });
  };
  var onInnerEnter = function onInnerEnter(value2, context) {
    var _tagValue$value, _props$onEnter;
    var valueStr = value2 ? String(value2).trim() : "";
    var isLimitExceeded = max && ((_tagValue$value = tagValue.value) === null || _tagValue$value === void 0 ? void 0 : _tagValue$value.length) >= max.value;
    var newValue = tagValue.value;
    if (!isLimitExceeded && valueStr) {
      newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];
      setTagValue(newValue, {
        trigger: "enter",
        index: newValue.length - 1,
        item: valueStr,
        e: context.e
      });
    }
    props === null || props === void 0 || (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, newValue, _objectSpread(_objectSpread({}, context), {}, {
      inputValue: value2
    }));
  };
  var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value2) {
    if (!tagValue.value || !tagValue.value.length) return;
    oldInputValue.value = value2;
  };
  var onInputBackspaceKeyDown = function onInputBackspaceKeyDown(value2, context) {
    var e = context.e;
    if (!tagValue.value || !tagValue.value.length || e.key === "Process" || isReadonly.value) return;
    var isDelete = /(Backspace|NumpadDelete)/i.test(e.code) || /(Backspace|NumpadDelete)/i.test(e.key);
    if (!value2 && isDelete) {
      var _onRemove$value2;
      var index = tagValue.value.length - 1;
      var item = tagValue.value[index];
      var trigger = "backspace";
      var newValue = tagValue.value.slice(0, -1);
      setTagValue(newValue, {
        e: e,
        index: index,
        item: item,
        trigger: trigger
      });
      (_onRemove$value2 = onRemove.value) === null || _onRemove$value2 === void 0 || _onRemove$value2.call(onRemove, {
        e: e,
        index: index,
        item: item,
        trigger: trigger,
        value: newValue
      });
    }
    oldInputValue.value = value2;
  };
  var renderLabel = function renderLabel(_ref) {
    var _newList$map;
    var displayNode = _ref.displayNode,
      label = _ref.label;
    var newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;
    var list = displayNode ? [displayNode] : (newList === null || newList === void 0 || (_newList$map = newList.map) === null || _newList$map === void 0 ? void 0 : _newList$map.call(newList, function (item, index) {
      var _getDragProps$value;
      var tagContent = renderTNode("tag", {
        params: {
          value: item
        }
      });
      return Vue.createVNode(tag_index.Tag, Vue.mergeProps({
        "key": "".concat(item).concat(index),
        "size": size.value,
        "disabled": isDisabled.value,
        "onClose": function onClose(context) {
          return _onClose({
            e: context.e,
            index: index
          });
        },
        "closable": !isReadonly.value && !isDisabled.value
      }, (_getDragProps$value = getDragProps.value) === null || _getDragProps$value === void 0 ? void 0 : _getDragProps$value.call(getDragProps, index, item), tagProps.value), {
        "default": function _default() {
          return [tagContent !== null && tagContent !== void 0 ? tagContent : item];
        }
      });
    })) || [];
    if (![null, void 0, ""].includes(label)) {
      list.unshift(Vue.createVNode("div", {
        "class": "".concat(classPrefix.value, "-tag-input__prefix"),
        "key": "label"
      }, [label]));
    }
    if (newList.length !== (tagValue.value || []).length) {
      var len = tagValue.value.length - newList.length;
      var more = renderTNode("collapsedItems", {
        params: {
          value: tagValue.value,
          count: tagValue.value.length - minCollapsedNum.value,
          collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),
          collapsedSelectedItems: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),
          onClose: _onClose
        }
      });
      list.push(more !== null && more !== void 0 ? more : Vue.createVNode(tag_index.Tag, Vue.mergeProps({
        "key": "more",
        "size": size.value
      }, tagProps.value), {
        "default": function _default() {
          return ["+", len];
        }
      }));
    }
    return list;
  };
  return {
    tagValue: tagValue,
    clearAll: clearAll,
    onClose: _onClose,
    onInnerEnter: onInnerEnter,
    onInputBackspaceKeyUp: onInputBackspaceKeyUp,
    onInputBackspaceKeyDown: onInputBackspaceKeyDown,
    renderLabel: renderLabel
  };
}

exports.useTagList = useTagList;
//# sourceMappingURL=useTagList.js.map
