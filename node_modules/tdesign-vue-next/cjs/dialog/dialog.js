/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var dialog_props = require('./props.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var dialog_hooks = require('./hooks.js');
var hooks_useDestroyOnClose = require('../hooks/useDestroyOnClose.js');
var getScrollbarWidth = require('../_chunks/dep-06c4a440.js');
var hooks_useTeleport = require('../hooks/useTeleport.js');
var hooks_usePopupManager = require('../hooks/usePopupManager.js');
var dialog_dialogCard = require('./dialog-card.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
require('@babel/runtime/helpers/typeof');
require('../hooks/tnode.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-ae77d744.js');
require('../_chunks/dep-acdd3481.js');
require('../_chunks/dep-8af7b432.js');
require('../_chunks/dep-fd23ce18.js');
require('../_chunks/dep-750b6c90.js');
require('../_chunks/dep-9a234926.js');
require('../_chunks/dep-179c4586.js');
require('../_chunks/dep-65ed94ad.js');
require('../_chunks/dep-93deee44.js');
require('../_chunks/dep-b74aef17.js');
require('../_chunks/dep-53d908b3.js');
require('../_chunks/dep-172ba234.js');
require('../_chunks/dep-f3362596.js');
require('../_chunks/dep-2930dcc3.js');
require('../_chunks/dep-481d05e9.js');
require('../_chunks/dep-ec56dcd9.js');
require('../_chunks/dep-b402ceae.js');
require('../_chunks/dep-901ff2b1.js');
require('../_chunks/dep-b8cfc98c.js');
require('../_chunks/dep-0d790559.js');
require('../button/index.js');
require('../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../loading/index.js');
require('../_chunks/dep-f6db9929.js');
require('../loading/plugin.js');
require('../_chunks/dep-ade5be71.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_chunks/dep-dca6be9c.js');
require('../_chunks/dep-623661fb.js');
require('../_chunks/dep-14f725de.js');
require('../_chunks/dep-31fe118c.js');
require('../_chunks/dep-db2cd3d2.js');
require('../utils/dom.js');
require('../_chunks/dep-c0c71352.js');
require('../loading/props.js');
require('../_chunks/dep-bc99882c.js');
require('../_chunks/dep-dbac77fd.js');
require('dayjs');
require('../_chunks/dep-9e37eebf.js');
require('../_chunks/dep-a01b02fa.js');
require('../_chunks/dep-7b70fa2b.js');
require('../_chunks/dep-8db04cd4.js');
require('../_chunks/dep-0d817d77.js');
require('../_chunks/dep-bbc5435a.js');
require('../_chunks/dep-10ffbad0.js');
require('../_chunks/dep-89db45fd.js');
require('../_chunks/dep-b75e3209.js');
require('../_chunks/dep-55ae3cb5.js');
require('../_chunks/dep-dc345794.js');
require('../_chunks/dep-a246b8d5.js');
require('../_chunks/dep-d9378865.js');
require('../_chunks/dep-3a398159.js');
require('../_chunks/dep-470ac849.js');
require('../_chunks/dep-973f44c6.js');
require('../_chunks/dep-b377c7d2.js');
require('../_chunks/dep-029e312d.js');
require('../utils/withInstall.js');
require('../button/props.js');
require('../hooks/useRipple.js');
require('../hooks/useKeepAnimation.js');
require('../hooks/useDisabled.js');
require('../_chunks/dep-5c1c1647.js');
require('../_chunks/dep-3a71bf71.js');
require('../_chunks/dep-2e858700.js');
require('../_chunks/dep-438edd07.js');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/classCallCheck');
require('tdesign-icons-vue-next');
require('./dialog-card-props.js');
require('../hooks/useGlobalIcon.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _objectWithoutProperties__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutProperties);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var _excluded = ["theme", "onConfirm", "onCancel", "onCloseBtnClick"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function GetCSSValue(v) {
  return Number.isNaN(Number(v)) ? v : "".concat(Number(v), "px");
}
var mousePosition;
var getClickPosition = function getClickPosition(e) {
  mousePosition = {
    x: e.clientX,
    y: e.clientY
  };
  setTimeout(function () {
    mousePosition = null;
  }, 100);
};
if (typeof window !== "undefined" && window.document && window.document.documentElement) {
  document.documentElement.addEventListener("click", getClickPosition, true);
}
function InitDragEvent(dragBox) {
  var target = dragBox;
  var windowInnerWidth = window.innerWidth || document.documentElement.clientWidth;
  var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;
  target.addEventListener("mousedown", function (targetEvent) {
    var disX = targetEvent.clientX - target.offsetLeft;
    var disY = targetEvent.clientY - target.offsetTop;
    var dialogW = target.offsetWidth;
    var dialogH = target.offsetHeight;
    if (dialogW > windowInnerWidth || dialogH > windowInnerHeight) return;
    function mouseMoverHandler(documentEvent) {
      var left = documentEvent.clientX - disX;
      var top = documentEvent.clientY - disY;
      if (left < 0) left = 0;
      if (top < 0) top = 0;
      if (windowInnerWidth - target.offsetWidth - left < 0) left = windowInnerWidth - target.offsetWidth;
      if (windowInnerHeight - target.offsetHeight - top < 0) top = windowInnerHeight - target.offsetHeight;
      target.style.position = "absolute";
      target.style.left = "".concat(left, "px");
      target.style.top = "".concat(top, "px");
    }
    function mouseUpHandler() {
      document.removeEventListener("mousemove", mouseMoverHandler);
      document.removeEventListener("mouseup", mouseUpHandler);
    }
    document.addEventListener("mousemove", mouseMoverHandler);
    document.addEventListener("mouseup", mouseUpHandler);
    document.addEventListener("dragend", mouseUpHandler);
  });
}
var key = 1;
var _Dialog = Vue.defineComponent({
  name: "TDialog",
  directives: {
    draggable: function draggable(el, binding) {
      if (el && binding && binding.value) {
        InitDragEvent(el);
      }
    }
  },
  inheritAttrs: false,
  props: dialog_props["default"],
  emits: ["update:visible"],
  setup: function setup(props2, context) {
    var _this = this;
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("dialog");
    var classPrefix = hooks_useConfig.usePrefixClass();
    var dialogEle = Vue.ref(null);
    var dialogCardRef = Vue.ref(null);
    var _useConfig = configProvider_useConfig.useConfig("dialog"),
      globalConfig = _useConfig.globalConfig;
    var confirmBtnAction = function confirmBtnAction(context2) {
      var _props2$onConfirm;
      (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, context2);
    };
    var cancelBtnAction = function cancelBtnAction(context2) {
      var _props2$onCancel;
      (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 || _props2$onCancel.call(props2, context2);
      emitCloseEvent({
        e: context2.e,
        trigger: "cancel"
      });
    };
    var teleportElement = hooks_useTeleport["default"](function () {
      return props2.attach;
    });
    hooks_useDestroyOnClose["default"]();
    var timer = Vue.ref();
    var styleEl = Vue.ref();
    var isModal = Vue.computed(function () {
      return props2.mode === "modal";
    });
    var isModeLess = Vue.computed(function () {
      return props2.mode === "modeless";
    });
    var isFullScreen = Vue.computed(function () {
      return props2.mode === "full-screen";
    });
    var computedVisible = Vue.computed(function () {
      return props2.visible;
    });
    var maskClass = Vue.computed(function () {
      return ["".concat(COMPONENT_NAME.value, "__mask"), !props2.showOverlay && "".concat(classPrefix.value, "-is-hidden")];
    });
    var positionClass = Vue.computed(function () {
      if (isFullScreen.value) return ["".concat(COMPONENT_NAME.value, "__position_fullscreen")];
      if (isModal.value || isModeLess.value) {
        return ["".concat(COMPONENT_NAME.value, "__position"), !!props2.top && "".concat(COMPONENT_NAME.value, "--top"), "".concat(props2.placement && !props2.top ? "".concat(COMPONENT_NAME.value, "--").concat(props2.placement) : "")];
      }
      return [];
    });
    var wrapClass = Vue.computed(function () {
      return isFullScreen.value || isModal.value || isModeLess.value ? ["".concat(COMPONENT_NAME.value, "__wrap")] : null;
    });
    var positionStyle = Vue.computed(function () {
      if (isFullScreen.value) return {};
      var top = props2.top;
      var topStyle = {};
      if (top !== void 0) {
        var topValue = GetCSSValue(top);
        topStyle = {
          paddingTop: topValue
        };
      }
      return topStyle;
    });
    var dialogClass = Vue.computed(function () {
      var dialogClass2 = ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "__modal-").concat(props2.theme), isModeLess.value && props2.draggable && "".concat(COMPONENT_NAME.value, "--draggable"), props2.dialogClassName];
      if (isFullScreen.value) {
        dialogClass2.push("".concat(COMPONENT_NAME.value, "__fullscreen"));
      } else {
        dialogClass2.push.apply(dialogClass2, ["".concat(COMPONENT_NAME.value, "--default"), "".concat(COMPONENT_NAME.value, "--").concat(props2.placement)]);
      }
      return dialogClass2;
    });
    var dialogStyle = Vue.computed(function () {
      return !isFullScreen.value ? _objectSpread({
        width: GetCSSValue(props2.width)
      }, props2.dialogStyle) : _objectSpread({}, props2.dialogStyle);
    });
    var _usePopupManager = hooks_usePopupManager["default"]("dialog", {
        visible: computedVisible
      }),
      isLastDialog = _usePopupManager.isLastDialog;
    Vue.watch(function () {
      return props2.visible;
    }, function (value) {
      if (value) {
        var _document$activeEleme;
        if (isModal.value && !props2.showInAttachedElement || isFullScreen.value) {
          if (props2.preventScrollThrough) {
            document.body.appendChild(styleEl.value);
          }
          Vue.nextTick(function () {
            if (mousePosition && dialogEle.value) {
              dialogEle.value.style.transformOrigin = "".concat(mousePosition.x - dialogEle.value.offsetLeft, "px ").concat(mousePosition.y - dialogEle.value.offsetTop, "px");
            }
          });
        }
        (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 || _document$activeEleme.blur();
      } else {
        clearStyleFunc();
      }
      addKeyboardEvent(value);
    });
    function destroySelf() {
      var _styleEl$value$parent, _styleEl$value$parent2;
      (_styleEl$value$parent = styleEl.value.parentNode) === null || _styleEl$value$parent === void 0 || (_styleEl$value$parent2 = _styleEl$value$parent.removeChild) === null || _styleEl$value$parent2 === void 0 || _styleEl$value$parent2.call(_styleEl$value$parent, styleEl.value);
    }
    function clearStyleFunc() {
      clearTimeout(timer.value);
      timer.value = setTimeout(function () {
        destroySelf();
      }, 150);
    }
    var addKeyboardEvent = function addKeyboardEvent(status) {
      if (status) {
        document.addEventListener("keydown", keyboardEvent);
        props2.confirmOnEnter && document.addEventListener("keydown", keyboardEnterEvent);
      } else {
        document.removeEventListener("keydown", keyboardEvent);
        props2.confirmOnEnter && document.removeEventListener("keydown", keyboardEnterEvent);
      }
    };
    var keyboardEnterEvent = function keyboardEnterEvent(e) {
      var eventSrc = e.target;
      if (eventSrc.tagName.toLowerCase() === "input") return;
      var code = e.code;
      if ((code === "Enter" || code === "NumpadEnter") && isLastDialog()) {
        var _props2$onConfirm2;
        (_props2$onConfirm2 = props2.onConfirm) === null || _props2$onConfirm2 === void 0 || _props2$onConfirm2.call(props2, {
          e: e
        });
      }
    };
    var keyboardEvent = function keyboardEvent(e) {
      if (e.code === "Escape" && isLastDialog()) {
        var _props2$onEscKeydown, _props2$closeOnEscKey;
        (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 || _props2$onEscKeydown.call(props2, {
          e: e
        });
        if ((_props2$closeOnEscKey = props2.closeOnEscKeydown) !== null && _props2$closeOnEscKey !== void 0 ? _props2$closeOnEscKey : globalConfig.value.closeOnEscKeydown) {
          emitCloseEvent({
            e: e,
            trigger: "esc"
          });
        }
      }
    };
    var overlayAction = function overlayAction(e) {
      var _props2$closeOnOverla;
      if (props2.showOverlay && ((_props2$closeOnOverla = props2.closeOnOverlayClick) !== null && _props2$closeOnOverla !== void 0 ? _props2$closeOnOverla : globalConfig.value.closeOnOverlayClick)) {
        var _props2$onOverlayClic;
        (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 || _props2$onOverlayClic.call(props2, {
          e: e
        });
        emitCloseEvent({
          e: e,
          trigger: "overlay"
        });
      }
    };
    var _useSameTarget = dialog_hooks.useSameTarget(overlayAction),
      onClick = _useSameTarget.onClick,
      onMousedown = _useSameTarget.onMousedown,
      onMouseup = _useSameTarget.onMouseup;
    var closeBtnAction = function closeBtnAction(context2) {
      var _props2$onCloseBtnCli;
      (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 || _props2$onCloseBtnCli.call(props2, context2);
      emitCloseEvent({
        trigger: "close-btn",
        e: context2.e
      });
    };
    var beforeEnter = function beforeEnter() {
      var _props2$onBeforeOpen;
      (_props2$onBeforeOpen = props2.onBeforeOpen) === null || _props2$onBeforeOpen === void 0 || _props2$onBeforeOpen.call(props2);
    };
    var afterEnter = function afterEnter() {
      var _props2$onOpened;
      (_props2$onOpened = props2.onOpened) === null || _props2$onOpened === void 0 || _props2$onOpened.call(props2);
    };
    var beforeLeave = function beforeLeave() {
      var _props2$onBeforeClose;
      (_props2$onBeforeClose = props2.onBeforeClose) === null || _props2$onBeforeClose === void 0 || _props2$onBeforeClose.call(props2);
    };
    var afterLeave = function afterLeave() {
      var _props2$onClosed;
      if (isModeLess.value && props2.draggable && dialogEle.value) {
        dialogEle.value.style.position = "relative";
        dialogEle.value.style.left = "unset";
        dialogEle.value.style.top = "unset";
      }
      (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 || _props2$onClosed.call(props2);
    };
    var emitCloseEvent = function emitCloseEvent(ctx) {
      var _props2$onClose;
      (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, ctx);
      context.emit("update:visible", false);
    };
    var hasEventOn = function hasEventOn(name) {
      var _this$_events;
      var eventFuncs = (_this$_events = _this["_events"]) === null || _this$_events === void 0 ? void 0 : _this$_events[name];
      return !!(eventFuncs !== null && eventFuncs !== void 0 && eventFuncs.length);
    };
    var renderDialog = function renderDialog() {
      var theme = props2.theme;
        props2.onConfirm;
        props2.onCancel;
        props2.onCloseBtnClick;
        var otherProps = _objectWithoutProperties__default["default"](props2, _excluded);
      return Vue.createVNode("div", {
        "class": wrapClass.value
      }, [Vue.createVNode("div", {
        "class": positionClass.value,
        "style": positionStyle.value,
        "onClick": onClick,
        "onMousedown": onMousedown,
        "onMouseup": onMouseup
      }, [Vue.withDirectives(Vue.createVNode("div", {
        "key": "dialog",
        "class": dialogClass.value,
        "style": dialogStyle.value,
        "ref": dialogEle
      }, [Vue.createVNode(dialog_dialogCard["default"], Vue.mergeProps({
        "ref": dialogCardRef,
        "theme": theme
      }, otherProps, {
        "onConfirm": confirmBtnAction,
        "onCancel": cancelBtnAction,
        "onCloseBtnClick": closeBtnAction
      }), context.slots)]), [[Vue.resolveDirective("draggable"), isModeLess.value && props2.draggable]])])]);
    };
    Vue.onMounted(function () {
      var hasScrollBar = document.documentElement.scrollHeight > document.documentElement.clientHeight;
      var scrollWidth = hasScrollBar ? getScrollbarWidth.getScrollbarWidth() : 0;
      styleEl.value = document.createElement("style");
      styleEl.value.dataset.id = "td_dialog_".concat(+new Date(), "_").concat(key += 1);
      styleEl.value.innerHTML = "\n        html body {\n          overflow-y: hidden;\n          width: calc(100% - ".concat(scrollWidth, "px);\n        }\n      ");
    });
    Vue.onBeforeUnmount(function () {
      addKeyboardEvent(false);
      destroySelf();
    });
    return {
      COMPONENT_NAME: COMPONENT_NAME,
      isModal: isModal,
      isModeLess: isModeLess,
      isFullScreen: isFullScreen,
      maskClass: maskClass,
      dialogClass: dialogClass,
      dialogStyle: dialogStyle,
      dialogEle: dialogEle,
      beforeEnter: beforeEnter,
      afterEnter: afterEnter,
      beforeLeave: beforeLeave,
      afterLeave: afterLeave,
      hasEventOn: hasEventOn,
      renderDialog: renderDialog,
      teleportElement: teleportElement
    };
  },
  render: function render() {
    var _this2 = this;
    var COMPONENT_NAME = this.COMPONENT_NAME;
    var maskView = (this.isModal || this.isFullScreen) && Vue.createVNode("div", {
      "key": "mask",
      "class": this.maskClass
    }, null);
    var dialogView = this.renderDialog();
    var view = [maskView, dialogView];
    var ctxStyle = {
      zIndex: this.zIndex
    };
    var ctxClass = ["".concat(COMPONENT_NAME, "__ctx"), _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(COMPONENT_NAME, "__ctx--fixed"), this.isModal || this.isFullScreen), "".concat(COMPONENT_NAME, "__ctx--absolute"), this.isModal && this.showInAttachedElement), "".concat(COMPONENT_NAME, "__ctx--modeless"), this.isModeLess)];
    return Vue.createVNode(Vue.Teleport, {
      "disabled": !this.attach || !this.teleportElement,
      "to": this.teleportElement
    }, {
      "default": function _default() {
        return [Vue.createVNode(Vue.Transition, {
          "duration": 300,
          "name": "".concat(COMPONENT_NAME, "-zoom__vue"),
          "onBeforeEnter": _this2.beforeEnter,
          "onAfterEnter": _this2.afterEnter,
          "onBeforeLeave": _this2.beforeLeave,
          "onAfterLeave": _this2.afterLeave
        }, {
          "default": function _default() {
            return [(!_this2.destroyOnClose || _this2.visible) && Vue.withDirectives(Vue.createVNode("div", Vue.mergeProps({
              "class": ctxClass,
              "style": ctxStyle
            }, _this2.$attrs), [view]), [[Vue.vShow, _this2.visible]])];
          }
        })];
      }
    });
  }
});

exports["default"] = _Dialog;
//# sourceMappingURL=dialog.js.map
