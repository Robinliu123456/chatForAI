/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var dialog_dialogCardProps = require('./dialog-card-props.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var dialog_hooks = require('./hooks.js');
var hooks_tnode = require('../hooks/tnode.js');
var dialog_props = require('./props.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
require('@babel/runtime/helpers/typeof');
require('../button/index.js');
require('../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../loading/index.js');
require('../_chunks/dep-f6db9929.js');
require('../loading/plugin.js');
require('../_chunks/dep-ade5be71.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_chunks/dep-dca6be9c.js');
require('../_chunks/dep-623661fb.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../_chunks/dep-14f725de.js');
require('../_chunks/dep-31fe118c.js');
require('../_chunks/dep-acdd3481.js');
require('../_chunks/dep-8af7b432.js');
require('../_chunks/dep-fd23ce18.js');
require('../_chunks/dep-750b6c90.js');
require('../_chunks/dep-db2cd3d2.js');
require('../utils/dom.js');
require('../_chunks/dep-c0c71352.js');
require('../_chunks/dep-f3362596.js');
require('../_chunks/dep-ae77d744.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-9a234926.js');
require('../_chunks/dep-179c4586.js');
require('../_chunks/dep-65ed94ad.js');
require('../_chunks/dep-93deee44.js');
require('../_chunks/dep-b74aef17.js');
require('../_chunks/dep-53d908b3.js');
require('../_chunks/dep-172ba234.js');
require('../_chunks/dep-2930dcc3.js');
require('../_chunks/dep-481d05e9.js');
require('../_chunks/dep-ec56dcd9.js');
require('../_chunks/dep-b402ceae.js');
require('../_chunks/dep-901ff2b1.js');
require('../_chunks/dep-b8cfc98c.js');
require('../_chunks/dep-0d790559.js');
require('../loading/props.js');
require('../hooks/useTeleport.js');
require('../_chunks/dep-bc99882c.js');
require('../_chunks/dep-dbac77fd.js');
require('dayjs');
require('../_chunks/dep-9e37eebf.js');
require('../_chunks/dep-a01b02fa.js');
require('../_chunks/dep-7b70fa2b.js');
require('../_chunks/dep-8db04cd4.js');
require('../_chunks/dep-0d817d77.js');
require('../_chunks/dep-bbc5435a.js');
require('../_chunks/dep-10ffbad0.js');
require('../_chunks/dep-89db45fd.js');
require('../_chunks/dep-b75e3209.js');
require('../_chunks/dep-55ae3cb5.js');
require('../_chunks/dep-dc345794.js');
require('../_chunks/dep-a246b8d5.js');
require('../_chunks/dep-d9378865.js');
require('../_chunks/dep-3a398159.js');
require('../_chunks/dep-470ac849.js');
require('../_chunks/dep-973f44c6.js');
require('../_chunks/dep-b377c7d2.js');
require('../_chunks/dep-029e312d.js');
require('../utils/withInstall.js');
require('../button/props.js');
require('../hooks/useRipple.js');
require('../hooks/useKeepAnimation.js');
require('../hooks/useDisabled.js');
require('../_chunks/dep-5c1c1647.js');
require('../_chunks/dep-3a71bf71.js');
require('../_chunks/dep-2e858700.js');
require('../_chunks/dep-438edd07.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _DialogCard = Vue.defineComponent({
  name: "TDialogCard",
  props: _objectSpread(_objectSpread({}, dialog_props["default"]), dialog_dialogCardProps["default"]),
  setup: function setup(props) {
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("dialog");
    var classPrefix = hooks_useConfig.usePrefixClass();
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var _useConfig = configProvider_useConfig.useConfig("dialog"),
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
        CloseIcon: tdesignIconsVueNext.CloseIcon,
        InfoCircleFilledIcon: tdesignIconsVueNext.InfoCircleFilledIcon,
        CheckCircleFilledIcon: tdesignIconsVueNext.CheckCircleFilledIcon,
        ErrorCircleFilledIcon: tdesignIconsVueNext.ErrorCircleFilledIcon
      }),
      CloseIcon = _useGlobalIcon.CloseIcon,
      InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
    var _toRefs = Vue.toRefs(props),
      cancelBtn = _toRefs.cancelBtn,
      confirmBtn = _toRefs.confirmBtn,
      confirmLoading = _toRefs.confirmLoading;
    var confirmBtnAction = function confirmBtnAction(e) {
      var _props$onConfirm;
      return (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
        e: e
      });
    };
    var cancelBtnAction = function cancelBtnAction(e) {
      var _props$onCancel;
      return (_props$onCancel = props.onCancel) === null || _props$onCancel === void 0 ? void 0 : _props$onCancel.call(props, {
        e: e
      });
    };
    var _useAction = dialog_hooks.useAction({
        confirmBtnAction: confirmBtnAction,
        cancelBtnAction: cancelBtnAction
      }),
      getConfirmBtn = _useAction.getConfirmBtn,
      getCancelBtn = _useAction.getCancelBtn;
    var isModeLess = Vue.computed(function () {
      return props.mode === "modeless";
    });
    var isFullScreen = Vue.computed(function () {
      return props.mode === "full-screen";
    });
    var defaultFooter = Vue.createVNode("div", null, [getCancelBtn({
      cancelBtn: cancelBtn.value,
      globalCancel: globalConfig.value.cancel,
      className: "".concat(COMPONENT_NAME.value, "__cancel")
    }), getConfirmBtn({
      theme: props === null || props === void 0 ? void 0 : props.theme,
      confirmBtn: confirmBtn.value,
      globalConfirm: globalConfig.value.confirm,
      globalConfirmBtnTheme: globalConfig.value.confirmBtnTheme,
      className: "".concat(COMPONENT_NAME.value, "__confirm"),
      confirmLoading: confirmLoading.value
    })]);
    var footerContent = renderTNodeJSX("footer", defaultFooter);
    var footerClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--fullscreen")] : "".concat(COMPONENT_NAME.value, "__footer");
    var closeBtnAction = function closeBtnAction(e) {
      var _props$onCloseBtnClic;
      return props === null || props === void 0 || (_props$onCloseBtnClic = props.onCloseBtnClick) === null || _props$onCloseBtnClic === void 0 ? void 0 : _props$onCloseBtnClic.call(props, {
        e: e
      });
    };
    var onStopDown = function onStopDown(e) {
      if (isModeLess.value && props !== null && props !== void 0 && props.draggable) e.stopPropagation();
    };
    var renderHeader = function renderHeader() {
      var _renderTNodeJSX;
      var header = (_renderTNodeJSX = renderTNodeJSX("header", Vue.createVNode("h5", {
        "class": "title"
      }, null))) !== null && _renderTNodeJSX !== void 0 ? _renderTNodeJSX : false;
      var headerClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__header"), "".concat(COMPONENT_NAME.value, "__header--fullscreen")] : "".concat(COMPONENT_NAME.value, "__header");
      var closeClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__close"), "".concat(COMPONENT_NAME.value, "__close--fullscreen")] : "".concat(COMPONENT_NAME.value, "__close");
      var getIcon = function getIcon() {
        var icon = {
          info: Vue.createVNode(InfoCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-info")
          }, null),
          warning: Vue.createVNode(ErrorCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-warning")
          }, null),
          danger: Vue.createVNode(ErrorCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-error")
          }, null),
          success: Vue.createVNode(CheckCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-success")
          }, null)
        };
        return icon[props === null || props === void 0 ? void 0 : props.theme];
      };
      return (header || (props === null || props === void 0 ? void 0 : props.closeBtn)) && Vue.createVNode("div", {
        "class": headerClassName,
        "onMousedown": onStopDown
      }, [Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__header-content")
      }, [getIcon(), header]), props !== null && props !== void 0 && props.closeBtn ? Vue.createVNode("span", {
        "class": closeClassName,
        "onClick": closeBtnAction
      }, [renderTNodeJSX("closeBtn", Vue.createVNode(CloseIcon, null, null))]) : null]);
    };
    var renderBody = function renderBody() {
      var body = renderContent("default", "body");
      var bodyClassName = (props === null || props === void 0 ? void 0 : props.theme) === "default" ? ["".concat(COMPONENT_NAME.value, "__body")] : ["".concat(COMPONENT_NAME.value, "__body__icon")];
      if (isFullScreen.value && footerContent) {
        bodyClassName.push("".concat(COMPONENT_NAME.value, "__body--fullscreen"));
      } else if (isFullScreen.value) {
        bodyClassName.push("".concat(COMPONENT_NAME.value, "__body--fullscreen--without-footer"));
      }
      return Vue.createVNode("div", {
        "class": bodyClassName,
        "onMousedown": onStopDown
      }, [body]);
    };
    var renderFooter = function renderFooter() {
      return footerContent && Vue.createVNode("div", {
        "class": footerClassName,
        "onMousedown": onStopDown
      }, [footerContent]);
    };
    return {
      renderHeader: renderHeader,
      renderBody: renderBody,
      renderFooter: renderFooter
    };
  },
  render: function render() {
    return Vue.createVNode(Vue.Fragment, null, [this.renderHeader(), this.renderBody(), !!this.footer && this.renderFooter()]);
  }
});

exports["default"] = _DialogCard;
//# sourceMappingURL=dialog-card.js.map
