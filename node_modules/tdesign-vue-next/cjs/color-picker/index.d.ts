import { TdColorPickerProps } from './type';
import './style';
export * from './type';
export type ColorPickerProps = TdColorPickerProps;
export type ColorPickerPanelProps = TdColorPickerProps;
export declare const ColorPickerPanel: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        closeBtn: {
            type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
            default: TdColorPickerProps["closeBtn"];
        };
        colorModes: {
            type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
            default: () => TdColorPickerProps["colorModes"];
        };
        disabled: BooleanConstructor;
        enableAlpha: BooleanConstructor;
        enableMultipleGradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        format: {
            type: import("vue").PropType<TdColorPickerProps["format"]>;
            default: TdColorPickerProps["format"];
            validator(val: TdColorPickerProps["format"]): boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
        };
        multiple: BooleanConstructor;
        popupProps: {
            type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
        };
        recentColors: {
            type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
            default: TdColorPickerProps["recentColors"];
        };
        defaultRecentColors: {
            type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
            default: () => TdColorPickerProps["defaultRecentColors"];
        };
        selectInputProps: {
            type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
        };
        showPrimaryColorPreview: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<TdColorPickerProps["size"]>;
            default: TdColorPickerProps["size"];
            validator(val: TdColorPickerProps["size"]): boolean;
        };
        swatchColors: {
            type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
        onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
        onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        closeBtn: {
            type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
            default: TdColorPickerProps["closeBtn"];
        };
        colorModes: {
            type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
            default: () => TdColorPickerProps["colorModes"];
        };
        disabled: BooleanConstructor;
        enableAlpha: BooleanConstructor;
        enableMultipleGradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        format: {
            type: import("vue").PropType<TdColorPickerProps["format"]>;
            default: TdColorPickerProps["format"];
            validator(val: TdColorPickerProps["format"]): boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
        };
        multiple: BooleanConstructor;
        popupProps: {
            type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
        };
        recentColors: {
            type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
            default: TdColorPickerProps["recentColors"];
        };
        defaultRecentColors: {
            type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
            default: () => TdColorPickerProps["defaultRecentColors"];
        };
        selectInputProps: {
            type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
        };
        showPrimaryColorPreview: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<TdColorPickerProps["size"]>;
            default: TdColorPickerProps["size"];
            validator(val: TdColorPickerProps["size"]): boolean;
        };
        swatchColors: {
            type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
        onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
        onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
    }>>, {
        value: string;
        disabled: boolean;
        modelValue: string;
        size: import("..").SizeEnum;
        defaultValue: string;
        multiple: boolean;
        format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
        borderless: boolean;
        clearable: boolean;
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        colorModes: ("monochrome" | "linear-gradient")[];
        recentColors: boolean | string[];
        defaultRecentColors: boolean | string[];
        enableAlpha: boolean;
        enableMultipleGradient: boolean;
        showPrimaryColorPreview: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        closeBtn: {
            type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
            default: TdColorPickerProps["closeBtn"];
        };
        colorModes: {
            type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
            default: () => TdColorPickerProps["colorModes"];
        };
        disabled: BooleanConstructor;
        enableAlpha: BooleanConstructor;
        enableMultipleGradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        format: {
            type: import("vue").PropType<TdColorPickerProps["format"]>;
            default: TdColorPickerProps["format"];
            validator(val: TdColorPickerProps["format"]): boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
        };
        multiple: BooleanConstructor;
        popupProps: {
            type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
        };
        recentColors: {
            type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
            default: TdColorPickerProps["recentColors"];
        };
        defaultRecentColors: {
            type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
            default: () => TdColorPickerProps["defaultRecentColors"];
        };
        selectInputProps: {
            type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
        };
        showPrimaryColorPreview: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<TdColorPickerProps["size"]>;
            default: TdColorPickerProps["size"];
            validator(val: TdColorPickerProps["size"]): boolean;
        };
        swatchColors: {
            type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
        onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
        onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: string;
        disabled: boolean;
        modelValue: string;
        size: import("..").SizeEnum;
        defaultValue: string;
        multiple: boolean;
        format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
        borderless: boolean;
        clearable: boolean;
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        colorModes: ("monochrome" | "linear-gradient")[];
        recentColors: boolean | string[];
        defaultRecentColors: boolean | string[];
        enableAlpha: boolean;
        enableMultipleGradient: boolean;
        showPrimaryColorPreview: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    closeBtn: {
        type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
        default: TdColorPickerProps["closeBtn"];
    };
    colorModes: {
        type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
        default: () => TdColorPickerProps["colorModes"];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    enableMultipleGradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    format: {
        type: import("vue").PropType<TdColorPickerProps["format"]>;
        default: TdColorPickerProps["format"];
        validator(val: TdColorPickerProps["format"]): boolean;
    };
    inputProps: {
        type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
    };
    recentColors: {
        type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
        default: TdColorPickerProps["recentColors"];
    };
    defaultRecentColors: {
        type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
        default: () => TdColorPickerProps["defaultRecentColors"];
    };
    selectInputProps: {
        type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
    };
    showPrimaryColorPreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<TdColorPickerProps["size"]>;
        default: TdColorPickerProps["size"];
        validator(val: TdColorPickerProps["size"]): boolean;
    };
    swatchColors: {
        type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
    onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
    onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    disabled: boolean;
    modelValue: string;
    size: import("..").SizeEnum;
    defaultValue: string;
    multiple: boolean;
    format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
    borderless: boolean;
    clearable: boolean;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    colorModes: ("monochrome" | "linear-gradient")[];
    recentColors: boolean | string[];
    defaultRecentColors: boolean | string[];
    enableAlpha: boolean;
    enableMultipleGradient: boolean;
    showPrimaryColorPreview: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const ColorPicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        closeBtn: {
            type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
            default: TdColorPickerProps["closeBtn"];
        };
        colorModes: {
            type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
            default: () => TdColorPickerProps["colorModes"];
        };
        disabled: BooleanConstructor;
        enableAlpha: BooleanConstructor;
        enableMultipleGradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        format: {
            type: import("vue").PropType<TdColorPickerProps["format"]>;
            default: TdColorPickerProps["format"];
            validator(val: TdColorPickerProps["format"]): boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
        };
        multiple: BooleanConstructor;
        popupProps: {
            type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
        };
        recentColors: {
            type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
            default: TdColorPickerProps["recentColors"];
        };
        defaultRecentColors: {
            type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
            default: () => TdColorPickerProps["defaultRecentColors"];
        };
        selectInputProps: {
            type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
        };
        showPrimaryColorPreview: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<TdColorPickerProps["size"]>;
            default: TdColorPickerProps["size"];
            validator(val: TdColorPickerProps["size"]): boolean;
        };
        swatchColors: {
            type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
        onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
        onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
    }>>, {
        baseClassName: import("vue").ComputedRef<any>;
        innerValue: import("vue").Ref<string>;
        visible: import("vue").Ref<boolean>;
        refTrigger: import("vue").Ref<HTMLElement>;
        renderPopupContent: () => JSX.Element;
        setVisible: (value: boolean) => boolean;
        setInnerValue: import("../hooks").ChangeHandler<string, [context: {
            color: import("./type").ColorObject;
            trigger: import("./type").ColorPickerChangeTrigger;
        }]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        closeBtn: {
            type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
            default: TdColorPickerProps["closeBtn"];
        };
        colorModes: {
            type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
            default: () => TdColorPickerProps["colorModes"];
        };
        disabled: BooleanConstructor;
        enableAlpha: BooleanConstructor;
        enableMultipleGradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        format: {
            type: import("vue").PropType<TdColorPickerProps["format"]>;
            default: TdColorPickerProps["format"];
            validator(val: TdColorPickerProps["format"]): boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
        };
        multiple: BooleanConstructor;
        popupProps: {
            type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
        };
        recentColors: {
            type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
            default: TdColorPickerProps["recentColors"];
        };
        defaultRecentColors: {
            type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
            default: () => TdColorPickerProps["defaultRecentColors"];
        };
        selectInputProps: {
            type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
        };
        showPrimaryColorPreview: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<TdColorPickerProps["size"]>;
            default: TdColorPickerProps["size"];
            validator(val: TdColorPickerProps["size"]): boolean;
        };
        swatchColors: {
            type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
        onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
        onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
    }>>, {
        value: string;
        disabled: boolean;
        modelValue: string;
        size: import("..").SizeEnum;
        defaultValue: string;
        multiple: boolean;
        format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
        borderless: boolean;
        clearable: boolean;
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        colorModes: ("monochrome" | "linear-gradient")[];
        recentColors: boolean | string[];
        defaultRecentColors: boolean | string[];
        enableAlpha: boolean;
        enableMultipleGradient: boolean;
        showPrimaryColorPreview: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        closeBtn: {
            type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
            default: TdColorPickerProps["closeBtn"];
        };
        colorModes: {
            type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
            default: () => TdColorPickerProps["colorModes"];
        };
        disabled: BooleanConstructor;
        enableAlpha: BooleanConstructor;
        enableMultipleGradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        format: {
            type: import("vue").PropType<TdColorPickerProps["format"]>;
            default: TdColorPickerProps["format"];
            validator(val: TdColorPickerProps["format"]): boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
        };
        multiple: BooleanConstructor;
        popupProps: {
            type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
        };
        recentColors: {
            type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
            default: TdColorPickerProps["recentColors"];
        };
        defaultRecentColors: {
            type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
            default: () => TdColorPickerProps["defaultRecentColors"];
        };
        selectInputProps: {
            type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
        };
        showPrimaryColorPreview: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<TdColorPickerProps["size"]>;
            default: TdColorPickerProps["size"];
            validator(val: TdColorPickerProps["size"]): boolean;
        };
        swatchColors: {
            type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
        onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
        onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
    }>>, {
        baseClassName: import("vue").ComputedRef<any>;
        innerValue: import("vue").Ref<string>;
        visible: import("vue").Ref<boolean>;
        refTrigger: import("vue").Ref<HTMLElement>;
        renderPopupContent: () => JSX.Element;
        setVisible: (value: boolean) => boolean;
        setInnerValue: import("../hooks").ChangeHandler<string, [context: {
            color: import("./type").ColorObject;
            trigger: import("./type").ColorPickerChangeTrigger;
        }]>;
    }, {}, {}, {}, {
        value: string;
        disabled: boolean;
        modelValue: string;
        size: import("..").SizeEnum;
        defaultValue: string;
        multiple: boolean;
        format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
        borderless: boolean;
        clearable: boolean;
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        colorModes: ("monochrome" | "linear-gradient")[];
        recentColors: boolean | string[];
        defaultRecentColors: boolean | string[];
        enableAlpha: boolean;
        enableMultipleGradient: boolean;
        showPrimaryColorPreview: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    closeBtn: {
        type: import("vue").PropType<TdColorPickerProps["closeBtn"]>;
        default: TdColorPickerProps["closeBtn"];
    };
    colorModes: {
        type: import("vue").PropType<TdColorPickerProps["colorModes"]>;
        default: () => TdColorPickerProps["colorModes"];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    enableMultipleGradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    format: {
        type: import("vue").PropType<TdColorPickerProps["format"]>;
        default: TdColorPickerProps["format"];
        validator(val: TdColorPickerProps["format"]): boolean;
    };
    inputProps: {
        type: import("vue").PropType<TdColorPickerProps["inputProps"]>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: import("vue").PropType<TdColorPickerProps["popupProps"]>;
    };
    recentColors: {
        type: import("vue").PropType<TdColorPickerProps["recentColors"]>;
        default: TdColorPickerProps["recentColors"];
    };
    defaultRecentColors: {
        type: import("vue").PropType<TdColorPickerProps["defaultRecentColors"]>;
        default: () => TdColorPickerProps["defaultRecentColors"];
    };
    selectInputProps: {
        type: import("vue").PropType<TdColorPickerProps["selectInputProps"]>;
    };
    showPrimaryColorPreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<TdColorPickerProps["size"]>;
        default: TdColorPickerProps["size"];
        validator(val: TdColorPickerProps["size"]): boolean;
    };
    swatchColors: {
        type: import("vue").PropType<TdColorPickerProps["swatchColors"]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: import("vue").PropType<TdColorPickerProps["onChange"]>;
    onPaletteBarChange: import("vue").PropType<TdColorPickerProps["onPaletteBarChange"]>;
    onRecentColorsChange: import("vue").PropType<TdColorPickerProps["onRecentColorsChange"]>;
}>>, {
    baseClassName: import("vue").ComputedRef<any>;
    innerValue: import("vue").Ref<string>;
    visible: import("vue").Ref<boolean>;
    refTrigger: import("vue").Ref<HTMLElement>;
    renderPopupContent: () => JSX.Element;
    setVisible: (value: boolean) => boolean;
    setInnerValue: import("../hooks").ChangeHandler<string, [context: {
        color: import("./type").ColorObject;
        trigger: import("./type").ColorPickerChangeTrigger;
    }]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    disabled: boolean;
    modelValue: string;
    size: import("..").SizeEnum;
    defaultValue: string;
    multiple: boolean;
    format: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
    borderless: boolean;
    clearable: boolean;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    colorModes: ("monochrome" | "linear-gradient")[];
    recentColors: boolean | string[];
    defaultRecentColors: boolean | string[];
    enableAlpha: boolean;
    enableMultipleGradient: boolean;
    showPrimaryColorPreview: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
