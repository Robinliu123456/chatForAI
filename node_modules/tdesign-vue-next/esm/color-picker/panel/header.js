/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isVNode, defineComponent, ref, watch, createVNode } from 'vue';
import props from '../props.js';
import { C as COLOR_MODES } from '../../_chunks/dep-16a813bc.js';
import { RadioGroup, RadioButton } from '../../radio/index.js';
import { useBaseClassName } from '../hooks/index.js';
import '../../hooks/index.js';
import { useConfig } from '../../config-provider/useConfig.js';
import '../../radio/radio.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/slicedToArray';
import '../../hooks/useConfig.js';
import 'lodash-es';
import '../../config-provider/context.js';
import '../../_chunks/dep-29ab0aa0.js';
import '@babel/runtime/helpers/typeof';
import '../../_chunks/dep-fad4e87b.js';
import 'dayjs';
import '../../_chunks/dep-81c9c3a2.js';
import '../../config-provider/type.js';
import '../../radio/props.js';
import '../../radio/consts/index.js';
import '../../hooks/useDisabled.js';
import '../../hooks/useReadonly.js';
import '../../hooks/useVModel.js';
import '../../hooks/tnode.js';
import '../../utils/render-tnode.js';
import '../../_chunks/dep-4605ddf4.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../../radio/group.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../../radio/radio-group-props.js';
import '../../radio/radio-button.js';
import '../../radio/hooks/index.js';
import '../../radio/hooks/useKeyboard.js';
import '../../utils/dom.js';
import '../../_chunks/dep-ae2e35f4.js';
import '../../watermark/hooks/index.js';
import '../../hooks/useResizeObserver.js';
import '../../utils/withInstall.js';
import '../../radio/style';
import '../../radio/type.js';
import '../../hooks/icon.js';
import '../../hooks/slot.js';
import '../../hooks/useCommonClassName.js';
import '../../hooks/useDefaultValue.js';
import '../../hooks/useDestroyOnClose.js';
import '../../hooks/useKeepAnimation.js';
import '../../hooks/useRipple.js';
import '../../_chunks/dep-7b6ca170.js';
import '../../hooks/useVirtualScroll.js';
import '../../hooks/useImagePreviewUrl.js';
import '../../_chunks/dep-5bb2887d.js';
import '../../_chunks/dep-164cb331.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var PanelHeader = defineComponent({
  name: "PanelHeader",
  props: _objectSpread(_objectSpread({}, props), {}, {
    mode: {
      type: String,
      "default": "color"
    },
    togglePopup: {
      type: Function
    },
    onModeChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  }),
  setup: function setup(props2) {
    var _useConfig = useConfig("colorPicker"),
      globalConfig = _useConfig.globalConfig;
    var baseClassName = useBaseClassName();
    var modeValue = ref(props2.mode);
    var handleModeChange = function handleModeChange(v) {
      return props2.onModeChange(v);
    };
    watch(function () {
      return props2.mode;
    }, function (v) {
      return modeValue.value = v;
    });
    return function () {
      var _slot2;
      var _props2$colorModes;
      if (((_props2$colorModes = props2.colorModes) === null || _props2$colorModes === void 0 ? void 0 : _props2$colorModes.length) === 1) {
        return null;
      }
      return createVNode("div", {
        "class": "".concat(baseClassName.value, "__head")
      }, [createVNode("div", {
        "class": "".concat(baseClassName.value, "__mode")
      }, [createVNode(RadioGroup, {
        "variant": "default-filled",
        "size": "small",
        "modelValue": modeValue.value,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return modeValue.value = $event;
        },
        "onChange": handleModeChange
      }, _isSlot(_slot2 = Object.keys(COLOR_MODES).map(function (key) {
        var _slot;
        return createVNode(RadioButton, {
          "key": key,
          "value": key
        }, _isSlot(_slot = Reflect.get(globalConfig.value, COLOR_MODES[key])) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      })) ? _slot2 : {
        "default": function _default() {
          return [_slot2];
        }
      })])]);
    };
  }
});

export { PanelHeader as default };
//# sourceMappingURL=header.js.map
