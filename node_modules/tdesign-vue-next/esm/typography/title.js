/**
 * tdesign v1.11.1
 * (c) 2025 tdesign
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import { isVNode, defineComponent, createVNode, mergeProps, h, Fragment } from 'vue';
import { usePrefixClass } from '../hooks/useConfig.js';
import props from './title-props.js';
import Ellipsis from './ellipsis.js';
import { useContent } from '../hooks/tnode.js';
import '../config-provider/useConfig.js';
import 'lodash-es';
import '../config-provider/context.js';
import '../_chunks/dep-29ab0aa0.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-fad4e87b.js';
import 'dayjs';
import '../_chunks/dep-81c9c3a2.js';
import '../config-provider/type.js';
import '@babel/runtime/helpers/defineProperty';
import './paragraph-props.js';
import '../tooltip/index.js';
import '../tooltip/tooltip.js';
import '@babel/runtime/helpers/slicedToArray';
import '../tooltip/props.js';
import '../popup/props.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@popperjs/core';
import '../hooks/index.js';
import '../hooks/icon.js';
import '../hooks/slot.js';
import '../utils/render-tnode.js';
import '../hooks/useCommonClassName.js';
import '../hooks/useDefaultValue.js';
import '../hooks/useDestroyOnClose.js';
import '../hooks/useKeepAnimation.js';
import '../hooks/useRipple.js';
import '../_chunks/dep-7b6ca170.js';
import '../hooks/useVirtualScroll.js';
import '../hooks/useVModel.js';
import '../hooks/useImagePreviewUrl.js';
import '../_chunks/dep-5bb2887d.js';
import '../_chunks/dep-164cb331.js';
import '../utils/dom.js';
import '../popup/container.js';
import '../hooks/useResizeObserver.js';
import '../utils/withInstall.js';
import '../popup/style';
import '../popup/type.js';
import '../tooltip/utils/index.js';
import '../tooltip/style';
import '../tooltip/type.js';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var _Title = defineComponent({
  name: "TTypographyTitle",
  props: props,
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("typography");
    var renderContent = useContent();
    return function () {
      var _slot;
      var Tag = props2.level;
      var content = renderContent("default", "content");
      return props2.ellipsis ? createVNode(Ellipsis, mergeProps(props2, {
        "class": COMPONENT_NAME.value
      }), _isSlot(_slot = h.apply(void 0, [Tag].concat(_toConsumableArray(content)))) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      }) : createVNode(Fragment, null, [h.apply(void 0, [Tag, {
        "class": COMPONENT_NAME.value
      }].concat(_toConsumableArray(content)))]);
    };
  }
});

export { _Title as default };
//# sourceMappingURL=title.js.map
